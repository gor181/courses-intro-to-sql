{
	"payload": "[{\"type\":\"SET_ASSISTANT\",\"show\":false}]",
	"preloadedState": "{\"content\":{\"files\":{\"course.yml\":{\"content\":\"title: Intro to SQL for Data Science\\ndescription: \\\"The role of a data scientist is to turn raw data into actionable insights.\\n  Much of the world's raw data—from electronic medical records to customer transaction\\n  histories—lives in organized collections of tables called <em>relational databases</em>.\\n  Therefore, to be an effective data scientist, you must know how to wrangle and extract\\n  data from these databases using a language called SQL (pronounced <em>ess-que-ell</em>, or\\n  <em>sequel</em>). This course teaches you everything you need to know to begin working with\\n  databases today!\\\"\\nprogramming_language: sql\\ndifficulty_level: 0\\nfrom: 'postgresql-base-prod:22'\\npractice_pool_id: 328\\n\",\"sha\":\"68974c0c83fb56d59f1028b0ded29d982e9293c1\",\"lastSavedSha\":\"68974c0c83fb56d59f1028b0ded29d982e9293c1\"},\"chapter1.md\":{\"content\":\"---\\ntitle: Selecting columns\\ndescription: >-\\n  This chapter provides a brief introduction to working with relational databases. You'll learn about their structure, how to talk about them using database lingo, and how to begin an analysis by using simple SQL commands to select and summarize columns from database tables.\\n\\n\\n---\\n## Welcome to the course!\\n\\n```yaml\\ntype: VideoExercise\\nlang: sql\\nxp: 50\\nskills: 1\\nkey: dcdbb24914\\n```\\n\\n`@projector_key`\\nf05d06ad7807cf476fdb5f674174c9d5\\n\\n---\\n## Onboarding | Tables\\n\\n```yaml\\ntype: MultipleChoiceExercise\\nlang: sql\\nxp: 50\\nskills: 1\\nkey: e456699517\\n```\\n\\nIf you've used DataCamp to learn [R](https://www.datacamp.com/courses/free-introduction-to-r) or [Python](https://www.datacamp.com/courses/intro-to-python-for-data-science), you'll be familiar with the interface. For SQL, however, there are a few new features you should be aware of.\\n\\nFor this course, you'll be using a database containing information on almost 5000 films. To the right, underneath the editor, you can see the data in this database by clicking through the tabs.\\n\\nFrom looking at the tabs, who is the first person listed in the `people` table?\\n\\n`@instructions`\\n- Kanye West\\n- Biggie Smalls\\n- 50 Cent\\n- Jay Z\\n\\n`@hint`\\nLook at the `people` tab under the editor! asdf adf\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\n```\\n\\n\\n`@sct`\\n```{python}\\nmsg1 = 'Nope, look at the `people` table!'\\ncorrect = 'Correct!'\\n\\nEx().test_mc(3,[msg1, msg1, correct, msg1])\\n```\\n\\n\\n\\n---\\n## Onboarding | Query Result\\n\\n```yaml\\ntype: MultipleChoiceExercise\\nlang: sql\\nxp: 50\\nskills: 1\\nkey: 5314676aac\\n```\\n\\nNotice the **query result** tab in the bottom right corner of your screen. This is where the results of your SQL queries will be displayed.\\n\\nRun the query in the editor and check out the resulting table in the query result tab!\\n\\n<hr>\\n\\nWho is the second person listed in the query result? asdf adfa a adsfa sdf\\n\\n`@instructions`\\n- Kanye West\\n- A. Michael Baldwin\\n- 50 Cent\\n- Jay Z\\n\\n`@hint`\\nRun the code in the editor and look at the query result tab under the editor!\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\n```\\n`@sample_code`\\n```{sql}\\nSELECT name FROM people;\\n```\\n\\n`@sct`\\n```{python}\\nmsg1 = 'Nope, look at the query result tab!'\\ncorrect = 'Correct!'\\n\\nEx().test_mc(2, [msg1, correct, msg1, msg1])\\n```\\n\\n\\n\\n---\\n## Onboarding | Errors\\n\\n```yaml\\ntype: NormalExercise\\nlang: sql\\nxp: 100\\nskills: 1\\nkey: 7d7e325a12\\n```\\n\\nIf you submit the code to the right, you'll see that you get two types of errors.\\n\\n_SQL_ errors are shown below the editor. These are errors returned by the _SQL_ engine. You should see:\\n\\n```\\nsyntax error at or near \\\"'DataCamp <3 SQL'\\\" LINE 2: 'DataCamp <3 SQL' ^\\n```\\n<br>\\n_DataCamp_ errors are shown in the **Instructions** box. These will let you know in plain English where you went wrong in your code! You should see:\\n\\n```\\nYou need to add SELECT at the start of line 2!\\n```\\n\\n\\ntest\\n\\n`@instructions`\\nSubmit the code to the right, check out the errors, then fix them!\\n\\n`@hint`\\nIn the editor, change line 2 to `SELECT 'DataCamp <3 SQL'`.\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\n```\\n`@sample_code`\\n```{sql}\\n-- Try running me!\\n'DataCamp <3 SQL'\\nAS result;\\n```\\n`@solution`\\n```{sql}\\n-- Try running me!\\nSELECT 'DataCamp <3 SQL'\\nAS result;\\n```\\n`@sct`\\n```{python}\\nEx().test_student_typed('SELECT|select', msg='You need to add `SELECT` at the start of line 2!')\\nEx().test_has_columns()\\nEx().test_error()\\n```\\n\\n\\n\\n---\\n## Onboarding | Bullet Exercises\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\nskills: 1\\nkey: 81eb00a53d\\n```\\n\\nAnother new feature we're introducing is the *bullet exercise*, which allows you to easily practice a new concept through repetition. Check it out below!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\n```\\n`@sample_code`\\n```{sql}\\nSELECT 'SQL'\\nAS result;\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 157ee8d1ad\\n```\\n\\n\\n\\n`@instructions`\\nSubmit the query in the editor! Don't worry, you'll learn how it works soon.\\n\\n`@hint`\\nSubmit the query!\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT 'SQL'\\nAS result;\\n```\\n`@sct`\\n```{python}\\nEx().test_error()\\n\\nEx().test_student_typed('SQL', msg=\\\"Don't modify the query!\\\", fixed=True)\\n\\nEx().test_has_columns()\\nEx().check_result()\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 764f82129d\\n```\\n\\n\\n\\n`@instructions`\\nNow change `'SQL'` to `'SQL is'` and click Submit!\\n\\n`@hint`\\nChange the code and submit the query!\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT 'SQL is'\\nAS result;\\n```\\n`@sct`\\n```{python}\\nEx().test_error()\\n\\nEx().test_student_typed('SQL is', msg=\\\"Did you change the query correctly?\\\", fixed=True)\\n\\nEx().test_has_columns()\\nEx().check_result()\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 1496605dac\\n```\\n\\n\\n\\n`@instructions`\\nFinally, change `'SQL is'` to `'SQL is cool!'` and click Submit!\\n\\n`@hint`\\nChange the code and submit the query!\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT 'SQL is cool!'\\nAS result;\\n```\\n`@sct`\\n```{python}\\nEx().test_error()\\n\\nEx().test_student_typed('SQL is cool!', msg=\\\"Did you change the query correctly?\\\", fixed=True)\\n\\nEx().test_has_columns()\\nEx().check_result()\\n```\\n\\n\\n\\n\\n---\\n## Beginning your SQL journey\\n\\n```yaml\\ntype: PlainMultipleChoiceExercise\\nlang: sql\\nxp: 50\\n\\nkey: a1f556e63f\\n```\\n\\nNow that you're familiar with the interface, let's get straight into it.\\n\\nSQL, which stands for *Structured Query Language*, is a language for interacting with data stored in something called a *relational database*.\\n\\nYou can think of a relational database as a collection of tables. A table is just a set of rows and columns, like a spreadsheet, which represents exactly one type of entity. For example, a table might represent employees in a company or purchases made, but not both.\\n\\nEach row, or *record*, of a table contains information about a single entity. For example, in a table representing employees, each row represents a single person. Each column, or *field*, of a table contains a single attribute for all rows in the table. For example, in a table representing employees, we might have a column containing first and last names for all employees.\\n\\nThe table of employees might look something like this:\\n\\n| id | name | age | nationality |\\n|----|----|----|----|\\n| 1 | Jessica | 22 | Ireland\\n| 2 | Gabriel | 48 | France |\\n| 3 | Laura | 36 | USA |\\n\\n<hr>\\nHow many fields does the employees table above contain?\\n\\n`@instructions`\\n- 1\\n- 2\\n- 3\\n- 4\\n\\n`@hint`\\nRemember that in database lingo, a column is called a *field*. How many fields does the table contain?\\n\\n\\n\\n\\n`@sct`\\n```{python}\\nmsg1 = \\\"Incorrect, a table contains information about one type of entity, but generally has multiple fields.\\\"\\nmsg2 = \\\"Sorry, try again!\\\"\\nmsg3 = \\\"Incorrect, the table contains three records, but how many fields does it have?\\\"\\nsuccess_msg = \\\"Correct! The table contains four columns, or fields.\\\"\\n\\nEx().test_mc(4, [msg1, msg2, msg3, success_msg])\\n```\\n\\n\\n\\n---\\n## SELECTing single columns\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: c0bb58f7f9\\n```\\n\\nWhile SQL can be used to create and modify databases, the focus of this course will be *querying* databases. A *query* is a request for data from a database table (or combination of tables). Querying is an essential skill for a data scientist, since the data you need for your analyses will often live in databases.\\n\\nIn SQL, you can select data from a table using a `SELECT` statement. For example, the following query selects the `name` column from the `people` table:\\n\\n```sql\\nSELECT name\\nFROM people;\\n```\\n\\nIn this query, `SELECT` and `FROM` are called keywords. In SQL, keywords are not case-sensitive, which means you can write the same query as:\\n\\n```sql\\nselect name\\nfrom people;\\n```\\n\\nThat said, it's good practice to make SQL keywords uppercase to distinguish them from other parts of your query, like column and table names.\\n\\nIt's also good practice (but not necessary for the exercises in this course) to include a semicolon at the end of your query. This tells SQL where the end of your query is!\\n\\nRemember, you can see the results of executing your query in the __query result__ tab to the right!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films', 'people'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: a41cc766d5\\n```\\n\\n\\n\\n`@instructions`\\nSelect the `title` column from the `films` table.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    title,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 4a74270ecd\\n```\\n\\n\\n\\n`@instructions`\\nSelect the `release_year` column from the `films` table.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT release_year\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    release_year,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 323bd5ddf5\\n```\\n\\n\\n\\n`@instructions`\\nSelect the `name` of each person in the `people` table.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT name\\nFROM people;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nname = test_column('name', msg='Did you select the `name` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    name,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## SELECTing multiple columns\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: 09f21bae4c\\n```\\n\\nWell done! Now you know how to select single columns.\\n\\nIn the real world, you will often want to select multiple columns. Luckily, SQL makes this really easy. To select multiple columns from a table, simply separate the column names with commas!\\n\\nFor example, this query selects two columns, `name` and `birthdate`, from the `people` table:\\n\\n```sql\\nSELECT name, birthdate\\nFROM people;\\n```\\n\\nSometimes, you may want to select all columns from a table. Typing out every column name would be a pain, so there's a handy shortcut:\\n\\n```sql\\nSELECT *\\nFROM people;\\n```\\n\\nIf you only want to return a certain number of results, you can use the `LIMIT` keyword to limit the number of rows returned:\\n\\n```sql\\nSELECT *\\nFROM people\\nLIMIT 10;\\n```\\n\\nBefore getting started with the instructions below, check out the column names in the `films` table by clicking on the `films` tab to the right!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: d561b4df97\\n```\\n\\n\\n\\n`@instructions`\\nGet the title of every film from the `films` table.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nfrom sqlwhat_ext import check_result2\\n\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` cause correct?')\\n\\nEx().test_correct(check_result2(), [\\n    from_clause,\\n    title,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 917d7dc533\\n```\\n\\n\\n\\n`@instructions`\\nGet the title and release year for every film.\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, release_year\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nfrom sqlwhat_ext import check_result2\\n\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column correctly?')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` cause correct?')\\n\\nEx().test_correct(check_result2(), [\\n    from_clause,\\n    title,\\n    release_year,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: eeba078a00\\n```\\n\\n\\n\\n`@instructions`\\nGet the title, release year and country for every film.\\n\\n`@hint`\\n```\\nSELECT ___, ___, ___\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, release_year, country\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nfrom sqlwhat_ext import check_result2\\n\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column correctly?')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column correctly?')\\n\\ncountry = test_column('country', msg='Did you select the `country` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` cause correct?')\\n\\nEx().test_correct(check_result2(), [\\n    from_clause,\\n    title,\\n    release_year,\\n    country,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: dac27d9aad\\n```\\n\\n\\n\\n`@instructions`\\nGet all columns from the `films` table.\\n\\n`@hint`\\n```\\nSELECT *\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT *\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nstar = sel.check_node('Star').has_equal_ast('Did you use `SELECT *` to get all columns?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    star,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## SELECT DISTINCT\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: de52236965\\n```\\n\\nOften your results will include many duplicate values. If you want to select all the unique values from a column, you can use the `DISTINCT` keyword.\\n\\nThis might be useful if, for example, you're interested in knowing which languages are represented in the `films` table:\\n\\n```sql\\nSELECT DISTINCT language\\nFROM films;\\n```\\n\\nRemember, you can check out the data in the tables by clicking on the tabs to the right under the editor!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films', 'roles'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: e6b81711f1\\n```\\n\\n\\n\\n`@instructions`\\nGet all the unique countries represented in the `films` table.\\n\\n`@hint`\\n```\\nSELECT DISTINCT ___\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT DISTINCT country\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ndistinct = sel.check_field('pref').has_equal_ast(\\\"Don't forget to use the `DISTINCT` keyword!\\\")\\n\\ncountry = test_column('country', msg='Did you select the `country` column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    distinct,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 2cb9a4bf6a\\n```\\n\\n\\n\\n`@instructions`\\nGet all the different film certifications from the `films` table.\\n\\n`@hint`\\n```\\nSELECT DISTINCT ___\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT DISTINCT certification\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ndistinct = sel.check_field('pref').has_equal_ast(\\\"Don't forget to use the `DISTINCT` keyword!\\\")\\n\\ncertification = test_column('certification', msg='Did you select the `certification` column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    certification,\\n    distinct,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 26835d3029\\n```\\n\\n\\n\\n`@instructions`\\nGet the different types of film roles from the `roles` table.\\n\\n`@hint`\\n```\\nSELECT DISTINCT ___\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT DISTINCT role\\nFROM roles;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ndistinct = sel.check_field('pref').has_equal_ast(\\\"Don't forget to use the `DISTINCT` keyword!\\\")\\n\\nrole = test_column('role', msg='Did you select the `role` column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    distinct,\\n    role,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## Learning to COUNT\\n\\n```yaml\\ntype: MultipleChoiceExercise\\nlang: sql\\nxp: 50\\n\\nkey: 97f97f5766\\n```\\n\\nWhat if you want to count the number of employees in your employees table? The `COUNT` statement lets you do this by returning the number of rows in one or more columns.\\n\\nFor example, this code gives the number of rows in the `people` table:\\n\\n```sql\\nSELECT COUNT(*)\\nFROM people;\\n```\\n\\n<hr>\\nHow many records are contained in the `reviews` table?\\n\\n`@instructions`\\n- 9,468\\n- 8,397\\n- 4,968\\n- 9,837\\n- 9,864\\n\\n`@hint`\\nRun a query to count the number of records in the `reviews` table!\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\n```\\n`@sample_code`\\n```{sql}\\n-- You can test out queries here!\\n```\\n\\n`@sct`\\n```{python}\\nsuccess_msg = 'Correct!'\\nmsg2 = \\\"Use the syntax provided in the example. Be sure to swap out `people` for `reviews`!\\\"\\n\\nEx().test_mc(3,[msg2, msg2, success_msg, msg2, msg2])\\n```\\n\\n\\n\\n---\\n## Practice with COUNT\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: 7643365e67\\n```\\n\\nAs you've seen, `COUNT(*)` tells you how many rows are in a table. However, if you want to count the number of *non-missing* values in a particular column, you can call `COUNT` on just that column.\\n\\nFor example, to count the number of birth dates present in the `people` table:\\n\\n```sql\\nSELECT COUNT(birthdate)\\nFROM people;\\n```\\n\\nIt's also common to combine `COUNT` with `DISTINCT` to count the number of *distinct* values in a column.\\n\\nFor example, this query counts the number of distinct birth dates contained in the `people` table:\\n\\n```sql\\nSELECT COUNT(DISTINCT birthdate)\\nFROM people;\\n```\\n\\nLet's get some practice with `COUNT`!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films', 'people'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 4688067e3e\\n```\\n\\n\\n\\n`@instructions`\\nCount the number of rows in the `people` table.\\n\\n`@hint`\\n```\\nSELECT COUNT(___)\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT COUNT(*)\\nFROM people;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\n\\ncount_call = temp.check_field('name').has_equal_ast('Are you calling the `COUNT` function?')\\n\\ncount_args = temp.check_field('args').has_equal_ast('Are you using `COUNT` on the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    count_call,\\n    count_args,\\n    count_call,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 497ffa962e\\n```\\n\\n\\n\\n`@instructions`\\nCount the number of (non-missing) birth dates in the `people` table.\\n\\n`@hint`\\n```\\nSELECT ___(___)\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT COUNT(birthdate)\\nFROM people;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\n\\ncount_call = temp.check_field('name').has_equal_ast('Are you calling the `COUNT` function?')\\n\\ncount_args = temp.check_field('args').has_equal_ast('Are you using `COUNT` on the right column?')\\n\\nfrom_clause = count_call.has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    count_call,\\n    count_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 50c903a00a\\n```\\n\\n\\n\\n`@instructions`\\nCount the number of unique birth dates in the `people` table.\\n\\n`@hint`\\n```\\nSELECT ___(DISTINCT ___)\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT COUNT(DISTINCT birthdate)\\nFROM people;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\n\\ncount_call = temp.check_field('name').has_equal_ast('Are you using `COUNT` with `DISTINCT`?')\\n\\n# not urgent: this might need to be changed\\n# count_distinct_arg = temp.check_field('pref').has_equal_ast('Are you using `DISTINCT` with `COUNT()`?')\\n\\ncount_args = temp.check_field('args').has_equal_ast('Are you using `COUNT` and `DISTINCT` with the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    count_call,\\n    count_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 511052cbbe\\n```\\n\\n\\n\\n`@instructions`\\nCount the number of unique languages in the `films` table.\\n\\n`@hint`\\n```\\nSELECT ___(DISTINCT ___)\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT COUNT(DISTINCT language)\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\n\\ncount_call = temp.check_field('name').has_equal_ast('Are you using `COUNT` with `DISTINCT`?')\\n\\n# not urgent: this might need to be changed\\n# count_distinct_arg = temp.check_field('pref').has_equal_ast('Are you using `DISTINCT` with `COUNT()`?')\\n\\ncount_args = temp.check_field('args').has_equal_ast('Are you using `COUNT` and `DISTINCT` with the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    count_call,\\n    count_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 9e1147efe5\\n```\\n\\n\\n\\n`@instructions`\\nCount the number of unique countries in the `films` table.\\n\\n`@hint`\\n```\\nSELECT ___(DISTINCT ___)\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT COUNT(DISTINCT country)\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\n\\ncount_call = temp.check_field('name').has_equal_ast('Are you using `COUNT` with `DISTINCT`?')\\n\\n# not urgent: this might need to be changed\\n# count_distinct_arg = temp.check_field('pref').has_equal_ast('Are you using `DISTINCT` with `COUNT()`?')\\n\\ncount_args = temp.check_field('args').has_equal_ast('Are you using `COUNT` and `DISTINCT` with the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    count_call,\\n    count_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\",\"sha\":\"eda06896d678740bdf6e73605ed51f314acfcfa6\",\"lastSavedSha\":\"eda06896d678740bdf6e73605ed51f314acfcfa6\"},\"chapter2.md\":{\"content\":\"---\\ntitle: Filtering rows\\ndescription: >-\\n  This chapter builds on the first by teaching you how to filter tables for rows satisfying some criteria of interest. You'll learn how to use basic comparison operators, combine multiple criteria, match patterns in text, and much more.\\n\\n\\n---\\n## Filtering results\\n\\n```yaml\\ntype: PlainMultipleChoiceExercise\\nlang: sql\\nxp: 50\\n\\nkey: bfc80ff2e5\\n```\\n\\nCongrats on finishing the first chapter! You now know how to select columns and perform basic counts. This chapter will focus on filtering your results.\\n\\nIn SQL, the `WHERE` keyword allows you to filter based on both text and numeric values in a table. There are a few different comparison operators you can use:\\n\\n- `=` equal\\n- `<>` not equal \\n- `<` less than\\n- `>` greater than\\n- `<=` less than or equal to\\n- `>=` greater than or equal to\\n\\nFor example, you can filter text records such as `title`. The following code returns all films with the title `'Metropolis'`:\\n\\n```\\nSELECT title\\nFROM films\\nWHERE title = 'Metropolis';\\n```\\n\\nNotice that the `WHERE` clause always comes after the `FROM` statement!\\n\\n**Note that in this course we will use `<>` and not `!=` for the not equal operator, as per the SQL standard.**\\n\\n<hr>\\nWhat does the following query return?\\n\\n```\\nSELECT title\\nFROM films\\nWHERE release_year > 2000;\\n```\\n\\n`@instructions`\\n- Films released before the year 2000\\n- Films released after the year 2000\\n- Films released after the year 2001\\n- Films released in 2000\\n\\n`@hint`\\nIf you're stuck, refer to the list of comparison operators above!\\n\\n\\n\\n\\n`@sct`\\n```{python}\\nsuccess_msg = \\\"Correct!\\\"\\nmsg2 = \\\"Incorrect. `>` means *strictly* greater than and *not* equal to.\\\"\\n\\nEx().test_mc(2, [msg2, success_msg, msg2, msg2])\\n```\\n\\n\\n\\n---\\n## Simple filtering of numeric values\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: b90db25f34\\n```\\n\\nAs you learned in the previous exercise, the `WHERE` clause can also be used to filter numeric records, such as years or ages.\\n\\nFor example, the following query selects all details for films with a budget over ten thousand dollars:\\n\\n```\\nSELECT *\\nFROM films\\nWHERE budget > 10000;\\n```\\n\\nNow it's your turn to use the `WHERE` clause to filter numeric values!\\n\\nasdf\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 8a4615ada8\\n```\\n\\n\\n\\n`@instructions`\\nGet all details for all films released in 2016.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___\\nWHERE ___ = ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT *\\nFROM films\\nWHERE release_year = 2016;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nstar = sel.check_node('Star').has_equal_ast('Are you selecting all columns?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nwhere_release_year = where_clause.has_equal_ast(sql='release_year = 2016', start='expression', exact=False, msg='Did you check the `release_year` correctly?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_release_year,\\n    star,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 5e6e1c74c6\\n```\\n\\n\\n\\n`@instructions`\\nGet the number of films released before 2000.\\n\\n`@hint`\\n```\\nSELECT ___(*)\\nFROM ___\\nWHERE ___ < ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT COUNT(*)\\nFROM films\\nWHERE release_year < 2000;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\n\\ncount_call = temp.check_field('name').has_equal_ast('Are you calling the `COUNT` function?')\\n\\ncount_args = temp.check_field('args').has_equal_ast('Are you using `COUNT` on the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause').has_equal_ast('Is your `WHERE` clause correct?')\\n\\nwhere_release_year = where_clause.has_equal_ast(sql='release_year < 2000', start='expression', exact=False, msg='Did you check the `release_year` correctly?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_release_year,\\n    count_call,\\n    count_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: d66f3d41b7\\n```\\n\\n\\n\\n`@instructions`\\nGet the title and release year of films released after 2000.\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___\\nWHERE ___ > ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, release_year\\nFROM films\\nWHERE release_year > 2000;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column?')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nwhere_release_year = where_clause.has_equal_ast(sql='release_year > 2000', start='expression', exact=False, msg='Did you check the `release_year` correctly?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_release_year,\\n    title,\\n    release_year,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## Simple filtering of text\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: b90db25f33\\n```\\n\\nRemember, the `WHERE` clause can also be used to filter text results, such as names or countries.\\n\\nFor example, this query gets the titles of all films which were filmed in China:\\n\\nsample edit adf\\n\\n```\\nSELECT title\\nFROM films\\nWHERE country = 'China';\\n```\\n\\nNow it's your turn to practice using `WHERE` with text values!\\n\\n**Important: in PostgreSQL (the version of SQL we're using), you must use single quotes with `WHERE`.**\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films', 'people'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: b645308dcd\\n```\\n\\n\\n\\n`@instructions`\\nGet all details for all French language films.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___\\nWHERE ___ = '___';\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT *\\nFROM films\\nWHERE language = 'French';\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nstar = sel.check_node('Star').has_equal_ast('Are you selecting all columns?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nwhere_language = where_clause.has_equal_ast(sql=\\\"language = 'French'\\\", start='expression', exact=False, msg='Did you check the `language` correctly? Remember to use single quotes.')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_language,\\n    star,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 051f6fb8ec\\n```\\n\\n\\n\\n`@instructions`\\nGet the name and birth date of the person born on November 11th, 1974. Remember to use ISO date format (`'1974-11-11'`)!\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___\\nWHERE ___ = '___';\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT name, birthdate\\nFROM people\\nWHERE birthdate = '1974-11-11';\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nname = test_column('name', msg='Did you select the `name` column?')\\n\\nbirthdate = test_column('birthdate', msg='Did you select the `birthdate` column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nwhere_birth = where_clause.has_equal_ast(sql=\\\"language = '1974-11-11'\\\", start='expression', exact=False, msg='Did you check the `birthdate` correctly? Remember to use single quotes.')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_birth,\\n    name,\\n    birthdate,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 7b872a3af0\\n```\\n\\n\\n\\n`@instructions`\\nGet the number of Hindi language films.\\n\\n`@hint`\\n```\\nSELECT ___(___)\\nFROM ___\\nWHERE ___ = '___';\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT COUNT(*)\\nFROM films\\nWHERE language = 'Hindi';\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\n\\ncount_call = temp.check_field('name').has_equal_ast('Are you calling the `COUNT` function?')\\n\\ncount_args = temp.check_field('args').has_equal_ast('Are you using `COUNT` on the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nwhere_language = where_clause.has_equal_ast(sql=\\\"language = 'Hindi'\\\", start='expression', exact=False, msg='Did you check the `language` correctly?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_language,\\n    count_call,\\n    count_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 2c87504f11\\n```\\n\\n\\n\\n`@instructions`\\nGet all details for all films with an R certification.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___\\nWHERE ___ = '___';\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT *\\nFROM films\\nWHERE certification = 'R';\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nstar = sel.check_node('Star').has_equal_ast('Are you selecting all columns?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nwhere_cert = where_clause.has_equal_ast(sql=\\\"certification = 'R'\\\", start='expression', exact=False, msg='Did you check the `certification` correctly?')\\n\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_cert,\\n    star,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## WHERE AND\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: 5bda32d7c8\\n```\\n\\nOften, you'll want to select data based on multiple conditions. You can build up your `WHERE` queries by combining multiple conditions with the `AND` keyword.\\n\\nFor example,\\n\\n```\\nSELECT title\\nFROM films\\nWHERE release_year > 1994\\nAND release_year < 2000;\\n```\\n\\ngives you the titles of films released between 1994 and 2000.\\n\\nNote that you need to specify the column name separately for every `AND` condition, so the following would be invalid:\\n\\n```\\nSELECT title\\nFROM films\\nWHERE release_year > 1994 AND < 2000;\\n```\\n\\nYou can add as many `AND` conditions as you need!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 7ccf93b215\\n```\\n\\n\\n\\n`@instructions`\\nGet the title and release year for all Spanish language films released before 2000.\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___\\nWHERE ___ < ___\\nAND ___ = '___';\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, release_year\\nFROM films\\nWHERE release_year < 2000\\nAND language = 'Spanish';\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you include the `title` column?')\\n\\nrelease_year = test_column('release_year', msg='Did you include the `release_year` column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nwhere_release_year = where_clause.has_equal_ast(sql='release_year < 2000', start='expression', exact=False, msg='Did you check the `release_year`?')\\n\\nwhere_language = where_clause.has_equal_ast(sql=\\\"language = 'Spanish'\\\", start='expression', exact=False, msg='Did you check the `language` correctly in your `WHERE` clause? Make sure to use single quotes.')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_release_year,\\n    where_language,\\n    title,\\n    release_year,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: e703c95e46\\n```\\n\\n\\n\\n`@instructions`\\nGet all details for Spanish language films released after 2000.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___\\nWHERE ___ > ___\\nAND ___ = '___';\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT *\\nFROM films\\nWHERE release_year > 2000\\nAND language = 'Spanish';\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nstar = sel.check_node('Star').has_equal_ast('Are you selecting all columns?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause').has_equal_ast('Is your `WHERE` clause correct?')\\n\\nwhere_release_year = where_clause.has_equal_ast(sql='release_year > 2000', start='expression', exact=False, msg='Did you check the `release_year` correctly?')\\n\\nwhere_language = where_clause.has_equal_ast(sql=\\\"language = 'Spanish'\\\", start='expression', exact=False, msg='Did you check the `language` correctly? Make sure to use single quotes.')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_release_year,\\n    where_language,\\n    star,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 7f2ba5c82f\\n```\\n\\n\\n\\n`@instructions`\\nGet all details for Spanish language films released after 2000, but before 2010.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___\\nWHERE ___ > ___\\nAND ___ < ___\\nAND ___ = '___';\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT *\\nFROM films\\nWHERE release_year > 2000\\nAND release_year < 2010\\nAND language = 'Spanish';\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nstar = sel.check_node('Star').has_equal_ast(msg='Are you selecing all columns?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nwhere_release_year1 = where_clause.has_equal_ast(sql='release_year > 2000', start='expression', exact=False, msg='Did you check the `release_year` correctly?')\\n\\nwhere_release_year2 = where_clause.has_equal_ast(sql='release_year < 2010', start='expression', exact=False, msg='Did you check the `release_year` correctly?')\\n\\nwhere_language = where_clause.has_equal_ast(sql=\\\"language = 'Spanish'\\\", start='expression', exact=False, msg='Did you check the `language` correctly? Make sure to use single quotes.')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_release_year1,\\n    where_release_year2,\\n    where_language,\\n    star,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## WHERE AND OR\\n\\n```yaml\\ntype: PlainMultipleChoiceExercise\\nlang: sql\\nxp: 50\\n\\nkey: 227814cb5d\\n```\\n\\nWhat if you want to select rows based on multiple conditions where some but not _all_ of the conditions need to be met? For this, SQL has the `OR` operator.\\n\\nFor example, the following returns all films released in *either* 1994 or 2000:\\n\\n```\\nSELECT title\\nFROM films\\nWHERE release_year = 1994\\nOR release_year = 2000;\\n```\\n\\nNote that you need to specify the column for every `OR` condition, so the following is invalid:\\n\\n```\\nSELECT title\\nFROM films\\nWHERE release_year = 1994 OR 2000;\\n```\\n\\nWhen combining `AND` and `OR`, be sure to enclose the individual clauses in parentheses, like so:\\n\\n```\\nSELECT title\\nFROM films\\nWHERE (release_year = 1994 OR release_year = 1995)\\nAND (certification = 'PG' OR certification = 'R');\\n```\\n\\nOtherwise, due to SQL's precedence rules, you may not get the results you're expecting!\\n\\n<hr>\\nWhat does the `OR` operator do?\\n\\n`@instructions`\\n- Display rows that meet <strong>one</strong> of the specified conditions.\\n- Display rows that meet <strong>all</strong> of the specified conditions.\\n- Display rows that meet <strong>none</strong> of the specified conditions.\\n\\n`@hint`\\nThink about records that meet condition1 **and** condition2.\\n\\n\\n\\n\\n`@sct`\\n```{python}\\nsuccess_msg = 'Correct!'\\nmsg1 = 'Incorrect. `OR` does not display rows that meet **all** of the specified conditions.'\\nmsg2 = 'Incorrect. `OR` does not display rows that meet **none** of the specified conditions.'\\n\\nEx().test_mc(1, [success_msg, msg1, msg2])\\n```\\n\\n\\n\\n---\\n## WHERE AND OR (2)\\n\\n```yaml\\ntype: TabExercise\\nlang: sql\\nxp: 100\\n\\nkey: ecc1838fc7\\n```\\n\\nYou now know how to select rows that meet __some__ but not __all__ conditions by combining `AND` and `OR`.\\n\\nFor example, the following query selects all films that were released in 1994 or 1995 which had a rating of PG or R.\\n\\n```\\nSELECT title\\nFROM films\\nWHERE (release_year = 1994 OR release_year = 1995)\\nAND (certification = 'PG' OR certification = 'R');\\n```\\n\\n<hr>\\n\\nNow you'll write a query to get the title and release year of films released in the 90s which were in French or Spanish and which took in more than $2M gross.\\n\\nIt looks like a lot, but you can build the query up one step at a time to get comfortable with the underlying concept in each step. Let's go!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 510b387baa\\n```\\n\\n\\n\\n`@instructions`\\nGet the title and release year for films released in the 90s.\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___\\nWHERE ___ >= 1990 AND ___ < 2000;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, release_year\\nFROM films\\nWHERE release_year >= 1990 AND release_year < 2000;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column?')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column?')\\n\\nfrom_clause = sel.check_field('from_clause')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nwhere_release_year1 = where_clause.has_equal_ast(sql='release_year >= 1990', start='expression', exact=False, msg='Did you check the `release_year` correctly in your `WHERE` clause?')\\n\\nwhere_release_year2 = where_clause.has_equal_ast(sql='release_year < 2000', start='expression', exact=False, msg='Did you check the `release_year` correctly in your `WHERE` clause?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_release_year1,\\n    where_release_year2,\\n    title,\\n    release_year,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 969ed73542\\n```\\n\\n\\n\\n`@instructions`\\nNow, build on your query to filter the records to only include French or Spanish language films.\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___\\nWHERE (___ >= 1990 AND ___ < 2000)\\nAND (___ = 'French' OR ___ = 'Spanish');\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, release_year\\nFROM films\\nWHERE (release_year >= 1990 AND release_year < 2000)\\nAND (language = 'French' OR language = 'Spanish');\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column?')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column?')\\n\\nfrom_clause = sel.check_field('from_clause')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nwhere_release_year1 = where_clause.has_equal_ast(sql='release_year >= 1990', start='expression', exact=False, msg='Did you check the `release_year` correctly in your `WHERE` clause?')\\n\\nwhere_release_year2 = where_clause.has_equal_ast(sql='release_year < 2000', start='expression', exact=False, msg='Did you check the `release_year` correctly in your `WHERE` clause?')\\n\\nwhere_language1 = where_clause.has_equal_ast(sql=\\\"language = 'French'\\\", start='expression', exact=False, msg='Did you check the `language` correctly in your `WHERE` clause?')\\n\\nwhere_language2 = where_clause.has_equal_ast(sql=\\\"language = 'Spanish'\\\", start='expression', exact=False, msg='Did you check the `language` correctly in your `WHERE` clause?')\\n\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_release_year1,\\n    where_release_year2,\\n    where_language1,\\n    where_language2,\\n    title,\\n    release_year,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: d961856c7a\\n```\\n\\n\\n\\n`@instructions`\\nFinally, restrict the query to only return films that took in more than $2M gross.\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___\\nWHERE (___ >= 1990 AND ___ < 2000)\\nAND (___ = '___' OR ___ = '___')\\nAND ___ > ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, release_year\\nFROM films\\nWHERE (release_year >= 1990 AND release_year < 2000)\\nAND (language = 'French' OR language = 'Spanish')\\nAND gross > 2000000;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column?')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column?')\\n\\nfrom_clause = sel.check_field('from_clause')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nwhere_release_year1 = where_clause.has_equal_ast(sql='release_year >= 1990', start='expression', exact=False, msg='Did you check the `release_year` correctly?')\\n\\nwhere_release_year2 = where_clause.has_equal_ast(sql='release_year < 2000', start='expression', exact=False, msg='Did you check the `release_year` correctly in your `WHERE` clause?')\\n\\nwhere_language1 = where_clause.has_equal_ast(sql=\\\"language = 'French'\\\", start='expression', exact=False, msg='Did you check the `language` correctly in your `WHERE` clause?')\\n\\nwhere_language2 = where_clause.has_equal_ast(sql=\\\"language = 'Spanish'\\\", start='expression', exact=False, msg='Did you check the `language` correctly in your `WHERE` clause?')\\n\\nwhere_gross = where_clause.has_equal_ast(sql='gross > 2000000', start='expression', exact=False, msg='Did you check the `gross` correctly in your `WHERE` clause?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_release_year1,\\n    where_release_year2,\\n    where_language1,\\n    where_language2,\\n    where_gross,\\n    title,\\n    release_year,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## BETWEEN\\n\\n```yaml\\ntype: PlainMultipleChoiceExercise\\nlang: sql\\nxp: 50\\n\\nkey: a1827199e2\\n```\\n\\nAs you've learned, you can use the following query to get titles of all films released in and between 1994 and 2000:\\n\\n```\\nSELECT title\\nFROM films\\nWHERE release_year >= 1994\\nAND release_year <= 2000;\\n```\\n\\nChecking for ranges like this is very common, so in SQL the `BETWEEN` keyword provides a useful shorthand for filtering values within a specified range. This query is equivalent to the one above:\\n\\n```\\nSELECT title\\nFROM films\\nWHERE release_year\\nBETWEEN 1994 AND 2000;\\n```\\n\\nIt's important to remember that `BETWEEN` is _inclusive_, meaning the beginning and end values are included in the results!\\n\\n<hr>\\nWhat does the `BETWEEN` keyword do?\\n\\n`@instructions`\\n- Filter numeric values\\n- Filter text values\\n- Filter values in a specified list\\n- Filter values in a specified range\\n\\n`@hint`\\nThink about looking for values **between** a beginning and end point.\\n\\n\\n\\n\\n`@sct`\\n```{python}\\nsuccess_msg = 'Correct!'\\nnumeric = 'Incorrect. `BETWEEN` does not just filter numeric values.'\\ntext = 'Incorrect. `BETWEEN` does not just filter text values.'\\nlst = 'Incorrect!'\\n\\nEx().test_mc(4, [numeric, text, lst, success_msg])\\n```\\n\\n\\n\\n---\\n## BETWEEN (2)\\n\\n```yaml\\ntype: TabExercise\\nlang: sql\\nxp: 100\\n\\nkey: 9c11f67712\\n```\\n\\nSimilar to the `WHERE` clause, the `BETWEEN` clause can be used with multiple `AND` and `OR` operators, so you can build up your queries and make them even more powerful!\\n\\nFor example, suppose we have a table called `kids`. We can get the names of all kids between the ages of 2 and 12 from the United States:\\n\\n```\\nSELECT name\\nFROM kids\\nWHERE age BETWEEN 2 AND 12\\nAND nationality = 'USA';\\n```\\n\\nTake a go at using `BETWEEN` with `AND` on the films data to get the title and release year of all Spanish language films released between 1990 and 2000 (inclusive) with budgets over $100 million. We have broken the problem into smaller steps so that you can build the query as you go along!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 9252da136b\\n```\\n\\n\\n\\n`@instructions`\\nGet the title and release year of all films released between 1990 and 2000 (inclusive).\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___\\nWHERE ___ BETWEEN ___ AND ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, release_year\\nFROM films\\nWHERE release_year BETWEEN 1990 AND 2000;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column?')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nbetween_left = where_clause.check_field('left').has_equal_ast('Are you using `release_year` with `BETWEEN`?')\\nbetween_op1 = where_clause.check_field('right', 0).has_equal_ast('Check the first part of your `BETWEEN`!')\\nbetween_op2 = where_clause.check_field('right', 1).has_equal_ast('Check the second part of your `BETWEEN`!')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    between_left,\\n    between_op1,\\n    between_op2,\\n    title,\\n    release_year,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: d21a4bec02\\n```\\n\\n\\n\\n`@instructions`\\nNow, build on your previous query to select only films that have budgets over $100 million.\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___\\nWHERE ___ BETWEEN ___ AND ___\\nAND ___ > ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, release_year\\nFROM films\\nWHERE release_year BETWEEN 1990 AND 2000\\nAND budget > 100000000;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column?')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\n# TODO: when test_not_typed() is a thing, use it here to check that `OR` was not typed\\n\\nbetween_node = where_clause.check_field('left')\\n\\nbetween_left = between_node.check_field('left').has_equal_ast('Are you using `release_year` with `BETWEEN`?')\\nbetween_op1 = between_node.check_field('right', 0).has_equal_ast('Check the first part of your `BETWEEN`!')\\nbetween_op2 = between_node.check_field('right', 1).has_equal_ast('Check the second part of your `BETWEEN`!')\\n\\nwhere_budget = where_clause.has_equal_ast(sql='budget > 100000000', start='expression', exact=False, msg='Did you check the `budget` correctly?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    between_left,\\n    between_op1,\\n    between_op2,\\n    where_budget,\\n    title,\\n    release_year,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 9087bf33ac\\n```\\n\\n\\n\\n`@instructions`\\nNow restrict the query to only return Spanish language films.\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___\\nWHERE ___ BETWEEN ___ AND ___\\nAND ___ > ___\\nAND ___ = '___';\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, release_year\\nFROM films\\nWHERE release_year BETWEEN 1990 AND 2000\\nAND budget > 100000000\\nAND language = 'Spanish';\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column?')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\n# TODO: when test_not_typed() is a thing, use it here to check that `OR` was not typed instead of `AND` on last line\\n\\nbetween_node = where_clause.check_field('left')\\n\\nbetween_left = between_node.check_field('left').has_equal_ast('Are you using `release_year` with `BETWEEN`?')\\nbetween_op1 = between_node.check_field('right', 0).has_equal_ast('Check the first part of your `BETWEEN`!')\\nbetween_op2 = between_node.check_field('right', 1).has_equal_ast('Check the second part of your `BETWEEN`!')\\n\\nwhere_budget = where_clause.has_equal_ast(sql='budget > 100000000', start='expression', exact=False, msg='Did you check the `budget` correctly?')\\n\\nwhere_language = where_clause.has_equal_ast(sql=\\\"language = 'Spanish'\\\", start='expression', exact=False, msg='Did you check the `language` correctly?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    between_left,\\n    between_op1,\\n    between_op2,\\n    where_budget,\\n    where_language,\\n    title,\\n    release_year,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 73d020dfab\\n```\\n\\n\\n\\n`@instructions`\\nFinally, modify to your previous query to include all Spanish language *or* French language films with the same criteria as before. Don't forget your parentheses!\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___\\nWHERE ___ BETWEEN ___ AND ___\\nAND ___ > ___\\nAND (___ = '___' OR ___ = '___');\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, release_year\\nFROM films\\nWHERE release_year BETWEEN 1990 AND 2000\\nAND budget > 100000000\\nAND (language = 'Spanish' OR language = 'French');\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column?')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\n# TODO: when test_not_typed() is a thing, use it here to check that `OR` was not typed instead of `AND` on last line\\n\\nbetween_left = where_clause.check_field('left').has_equal_ast('Are you using `release_year` with `BETWEEN`?')\\nbetween_op1 = where_clause.check_field('right', 0).has_equal_ast('Check the first part of your `BETWEEN`!')\\nbetween_op2 = where_clause.check_field('right', 1).has_equal_ast('Check the second part of your `BETWEEN`!')\\n\\nwhere_budget = where_clause.has_equal_ast(sql='budget > 100000000', start='expression', exact=False, msg='Did you check the `budget` correctly?')\\n\\nwhere_language1 = where_clause.has_equal_ast(sql=\\\"language = 'Spanish'\\\", start='expression', exact=False, msg='Did you check the Spanish `language` correctly?')\\n\\nwhere_language2 = where_clause.has_equal_ast(sql=\\\"language = 'French'\\\", start='expression', exact=False, msg='Did you check the French `language` correctly?')\\n\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_budget,\\n    where_language1,\\n    where_language2,\\n    between_left,\\n    between_op1,\\n    between_op2,\\n    title,\\n    release_year,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## WHERE IN\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: 4fc7e638f8\\n```\\n\\nAs you've seen, `WHERE` is very useful for filtering results. However, if you want to filter based on many conditions, `WHERE` can get unwieldy. For example:\\n\\n```\\nSELECT name\\nFROM kids\\nWHERE age = 2\\nOR age = 4\\nOR age = 6\\nOR age = 8\\nOR age = 10;\\n```\\n\\nEnter the `IN` operator! The `IN` operator allows you to specify multiple values in a `WHERE` clause, making it easier and quicker to specify multiple `OR` conditions! Neat, right?\\n\\nSo, the above example would become simply:\\n\\n```\\nSELECT name\\nFROM kids\\nWHERE age IN (2, 4, 6, 8, 10);\\n```\\n\\nTry using the `IN` operator yourself!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: dc7674d358\\n```\\n\\n\\n\\n`@instructions`\\nGet the title and release year of all films released in 1990 or released in 2000 that were longer than two hours. Remember, duration is in minutes!\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___\\nWHERE release_year IN (___, ___)\\nAND ___ > ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, release_year\\nFROM films\\nWHERE release_year IN (1990, 2000)\\nAND duration > 120;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column?')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\n# hack to deal with AST morphing\\ntyped_and = test_student_typed('and|AND', msg='Make sure to use an `AND` statement in your `WHERE` clause!')\\n\\nwhere_duration = where_clause.has_equal_ast(sql=\\\"duration > 120\\\", start='expression', exact=False, msg='Did you check the `duration` correctly?')\\n\\nin_thing = where_clause.has_equal_ast(sql=\\\"release_year IN (1990, 2000)\\\", start='expression', exact=False, msg='Did you use `IN` correctly?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    typed_and,\\n    in_thing,\\n    where_duration,\\n    title,\\n    release_year,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 3a84c097d2\\n```\\n\\n\\n\\n`@instructions`\\nGet the title and language of all films which were in English, Spanish, or French.\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___\\nWHERE ___ IN ('___', '___', '___');\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, language\\nFROM films\\nWHERE language IN ('English', 'Spanish', 'French');\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column?')\\n\\nlanguage = test_column('language', msg='Did you select the `language` column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nin_thing = where_clause.has_equal_ast(sql=\\\"WHERE language IN ('English', 'Spanish', 'French')\\\", start='expression', exact=False, msg='Did you use `IN` correctly?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    in_thing,\\n    title,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 3c947b0d2d\\n```\\n\\n\\n\\n`@instructions`\\nGet the title and certification of all films with an NC-17 or R certification.\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___\\nWHERE ___ IN ('NC-17', '___');\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, certification\\nFROM films\\nWHERE certification IN ('NC-17', 'R');\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column?')\\n\\ncertification = test_column('certification', msg='Did you select the `certification` column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nin_thing = where_clause.has_equal_ast(sql=\\\"certification IN ('NC-17', 'R')\\\", start='expression', exact=False, msg='Did you use `IN` correctly?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    in_thing,\\n    title,\\n    certification,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## Introduction to NULL and IS NULL\\n\\n```yaml\\ntype: PlainMultipleChoiceExercise\\nlang: sql\\nxp: 50\\n\\nkey: 5cf67b42b3\\n```\\n\\nIn SQL, `NULL` represents a missing or unknown value. You can check for `NULL` values using the expression `IS NULL`. For example, to count the number of missing birth dates in the `people` table:\\n\\n```\\nSELECT COUNT(*)\\nFROM people\\nWHERE birthdate IS NULL;\\n```\\n\\nAs you can see, `IS NULL` is useful when combined with `WHERE` to figure out what data you're missing.\\n\\nSometimes, you'll want to filter out missing values so you only get results which are not `NULL`. To do this, you can use the `IS NOT NULL` operator.\\n\\nFor example, this query gives the names of all people whose birth dates are *not* missing in the `people` table.\\n\\n```\\nSELECT name\\nFROM people\\nWHERE birthdate IS NOT NULL;\\n```\\n\\n<hr>\\nWhat does `NULL` represent?\\n\\n`@instructions`\\n- A corrupt entry\\n- A missing value\\n- An empty string\\n- An invalid value\\n\\n`@hint`\\nRemember, `NULL` represents values which are missing or unknown.\\n\\n\\n\\n\\n`@sct`\\n```{python}\\ncorrupt = 'Incorrect. We can not be sure that a `NULL` value is actually corrupt.'\\nsuccess_msg = 'Correct! `NULL` is used to represent unknown values.'\\nempty = 'Incorrect. An empty string is not the same as a `NULL` value.'\\ninvalid = 'Incorrect!'\\n\\nEx().test_mc(2, [corrupt, success_msg, empty, invalid])\\n```\\n\\n\\n\\n---\\n## NULL and IS NULL\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: 84411d78ab\\n```\\n\\nNow that you know what `NULL` is and what it's used for, it's time for some practice!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films', 'people'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 3c646ada87\\n```\\n\\n\\n\\n`@instructions`\\nGet the names of people who are still alive, i.e. whose death date is missing.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___\\nWHERE ___ IS NULL;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT name\\nFROM people\\nWHERE deathdate IS NULL;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nname = test_column('name', 'Did you select the `name` column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause').has_equal_ast('Are you checking `deathdate IS NULL` in your `WHERE` clause?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_clause,\\n    name,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 3c646ada89\\n```\\n\\n\\n\\n`@instructions`\\nGet the title of every film which doesn't have a budget associated with it.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___\\nWHERE ___ ___ ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title\\nFROM films\\nWHERE budget IS NULL;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Are you selecting the `title` column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause').has_equal_ast('Are you checking `budget IS NULL` in your `WHERE` clause?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_clause,\\n    title,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 3c646ada88\\n```\\n\\n\\n\\n`@instructions`\\nGet the number of films which don't have a language associated with them.\\n\\n`@hint`\\n```\\nSELECT ___(___)\\nFROM ___\\nWHERE language ___ ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT COUNT(title)\\nFROM films\\nWHERE language IS NULL;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\n\\ncount_call = temp.check_field('name').has_equal_ast('Are you calling the `COUNT` function?')\\n\\ncount_args = temp.check_field('args', 0).has_equal_ast('Are you using `COUNT` on the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause').has_equal_ast('Are you checking `language IS NULL` in your `WHERE` clause?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_clause,\\n    count_call,\\n    count_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## LIKE and NOT LIKE\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: 84411d78ac\\n```\\n\\nAs you've seen, the `WHERE` clause can be used to filter text data. However, so far you've only been able to filter by specifying the exact text you're interested in. In the real world, often you'll want to search for a *pattern* rather than a specific text string.\\n\\nIn SQL, the `LIKE` operator can be used in a `WHERE` clause to search for a pattern in a column. To accomplish this, you use something called a _wildcard_ as a placeholder for some other values. There are two wildcards you can use with `LIKE`:\\n\\nThe `%` wildcard will match zero, one, or many characters in text. For example, the following query matches companies like `'Data'`, `'DataC'` `'DataCamp'`, `'DataMind'`, and so on:\\n\\n```\\nSELECT name\\nFROM companies\\nWHERE name LIKE 'Data%';\\n```\\n\\nThe `_` wildcard will match a _single_ character. For example, the following query matches companies like `'DataCamp'`, `'DataComp'`, and so on:\\n\\n```\\nSELECT name\\nFROM companies\\nWHERE name LIKE 'DataC_mp';\\n```\\n\\nYou can also use the `NOT LIKE` operator to find records that *don't* match the pattern you specify.\\n\\nGot it? Let's practice!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['people'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 9e3c3ef68f\\n```\\n\\n\\n\\n`@instructions`\\nGet the names of all people whose names begin with 'B'. The pattern you need is `'B%'`.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___\\nWHERE ___ LIKE '___';\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT name\\nFROM people\\nWHERE name LIKE 'B%';\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nname = test_column('name', msg='Are you selecting the `name` column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nleft_like = where_clause.check_field('left').has_equal_ast('Are you using `name` with `LIKE`?')\\nop_like = where_clause.check_field('op').has_equal_ast('Are you using the `LIKE` operator in your `WHERE` clause?')\\nright_like = where_clause.check_field('right').has_equal_ast(\\\"Are you using `LIKE` with `'B%'`?\\\")\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    left_like,\\n    op_like,\\n    right_like,\\n    name,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 606b667e1c\\n```\\n\\n\\n\\n`@instructions`\\nGet the names of people whose names have 'r' as the second letter. The pattern you need is `'_r%'`.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___\\nWHERE ___ ___ '___';\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT name\\nFROM people\\nWHERE name LIKE '_r%';\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nname = test_column('name', msg='Are you selecting the `name` column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nleft_like = where_clause.check_field('left').has_equal_ast('Are you using `name` with `LIKE`?')\\nop_like = where_clause.check_field('op').has_equal_ast('Are you using the `LIKE` operator in your `WHERE` clause?')\\nright_like = where_clause.check_field('right').has_equal_ast(\\\"Are you using `LIKE` with `'_r%'`?\\\")\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    left_like,\\n    op_like,\\n    right_like,\\n    name,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 2e4f49a528\\n```\\n\\n\\n\\n`@instructions`\\nGet the names of people whose names don't start with A. The pattern you need is `'A%'`.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___\\nWHERE ___ NOT LIKE '___';\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT name\\nFROM people\\nWHERE name NOT LIKE 'A%';\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nname = test_column('name', msg='Are you selecting the `name` column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\nlike_clause = where_clause.check_field('expr')\\n\\nop_like = where_clause.check_field('op').has_equal_ast('Are you using the `NOT LIKE` operator in your `WHERE` clause?')\\n\\nleft_like = like_clause.check_field('left').has_equal_ast('Are you using `name` with `NOT LIKE`?')\\n# TODO: might need to add a test_student_typed() here\\n\\nright_like = like_clause.check_field('right').has_equal_ast(\\\"Are you using `NOT LIKE` with `'A%'`?\\\")\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    left_like,\\n    right_like,\\n    op_like,\\n    name,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\",\"sha\":\"2091b9101f12c36716dfad86b84db5bfef452857\",\"lastSavedSha\":\"2091b9101f12c36716dfad86b84db5bfef452857\"},\"chapter3.md\":{\"content\":\"---\\ntitle: Aggregate Functions\\ndescription: >-\\n  This chapter builds on the first two by teaching you how to use aggregate functions to summarize your data and gain useful insights. Additionally, you'll learn about arithmetic in SQL, and how to use aliases to make your results more readable!\\n\\n\\n---\\n## Aggregate functions\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: b883e7079f\\n```\\n\\nOften, you will want to perform some calculation on the data in a database. SQL provides a few functions, called *aggregate functions*, to help you out with this.\\n\\nsome example edit.\\n\\nFor example,\\n\\n```\\nSELECT AVG(budget)\\nFROM films;\\n```\\n\\ngives you the average value from the `budget` column of the `films` table. Similarly, the `MAX` function returns the highest budget:\\n\\n```\\nSELECT MAX(budget)\\nFROM films;\\n```\\n\\nThe `SUM` function returns the result of adding up the numeric values in a column:\\n\\n```\\nSELECT SUM(budget)\\nFROM films;\\n```\\n\\nYou can probably guess what the `MIN` function does! Now it's your turn to try out some SQL functions.\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 80fd462ae1\\n```\\n\\n\\n\\n`@instructions`\\nUse the `SUM` function to get the total duration of all films.\\n\\n`@hint`\\n```\\nSELECT ___(___)\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT SUM(duration)\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\nsum_call = temp.check_field('name').has_equal_ast('Are you calling the `SUM` function?')\\nsum_args = temp.check_field('args').has_equal_ast('Are you using using `SUM` on the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    sum_call,\\n    sum_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 7993b51268\\n```\\n\\n\\n\\n`@instructions`\\nGet the average duration of all films.\\n\\n`@hint`\\n```\\nSELECT ___(___)\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT AVG(duration)\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\navg_call = temp.check_field('name').has_equal_ast('Are you calling the `AVG` function?')\\navg_args = temp.check_field('args').has_equal_ast('Are you using using `AVG` on the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    avg_call,\\n    avg_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: a03aeabbc6\\n```\\n\\n\\n\\n`@instructions`\\nGet the duration of the shortest film.\\n\\n`@hint`\\n```\\nSELECT ___(___)\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT MIN(duration)\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\nmin_call = temp.check_field('name').has_equal_ast('Are you calling the `MIN` function?')\\nmin_args = temp.check_field('args').has_equal_ast('Are you using using `MIN` on the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    min_call,\\n    min_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: fabbc619c6\\n```\\n\\n\\n\\n`@instructions`\\nGet the duration of the longest film.\\n\\n`@hint`\\n```\\nSELECT ___(___)\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT MAX(duration)\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\nmax_call = temp.check_field('name').has_equal_ast('Are you calling the `MAX` function?')\\nmax_args = temp.check_field('args').has_equal_ast('Are you using using `MAX` on the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    max_call,\\n    max_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## Aggregate functions practice\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: e60103b3f1\\n```\\n\\nGood work. Aggregate functions are important to understand, so let's get some more practice!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: c8173b7d3e\\n```\\n\\n\\n\\n`@instructions`\\nUse the `SUM` function to get the total amount grossed by all films.\\n\\n`@hint`\\n```\\nSELECT ___(___)\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT SUM(gross)\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\nsum_call = temp.check_field('name').has_equal_ast('Are you calling the `SUM` function?')\\nsum_args = temp.check_field('args').has_equal_ast('Are you using using `SUM` on the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    sum_call,\\n    sum_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 24c0ab68ad\\n```\\n\\n\\n\\n`@instructions`\\nGet the average amount grossed by all films.\\n\\n`@hint`\\n```\\nSELECT ___(___)\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT AVG(gross)\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\navg_call = temp.check_field('name').has_equal_ast('Are you calling the `AVG` function?')\\navg_args = temp.check_field('args').has_equal_ast('Are you using using `AVG` on the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    avg_call,\\n    avg_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 19838082cb\\n```\\n\\n\\n\\n`@instructions`\\nGet the amount grossed by the worst performing film.\\n\\n`@hint`\\n```\\nSELECT ___(___)\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT MIN(gross)\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\nmin_call = temp.check_field('name').has_equal_ast('Are you calling the `MIN` function?')\\nmin_args = temp.check_field('args').has_equal_ast('Are you using using `MIN` on the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    min_call,\\n    min_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: a49b98de42\\n```\\n\\n\\n\\n`@instructions`\\nGet the amount grossed by the best performing film.\\n\\n`@hint`\\n```\\nSELECT ___(___)\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT MAX(gross)\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\nmax_call = temp.check_field('name').has_equal_ast('Are you calling the `MAX` function?')\\nmax_args = temp.check_field('args').has_equal_ast('Are you using using `MAX` on the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    max_call,\\n    max_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## Combining aggregate functions with WHERE\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: b44bd43288\\n```\\n\\nAggregate functions can be combined with the `WHERE` clause to gain further insights from your data.\\n\\nFor example, to get the total budget of movies made in the year 2010 or later:\\n\\n```\\nSELECT SUM(budget)\\nFROM films\\nWHERE release_year >= 2010;\\n```\\n\\nNow it's your turn!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: b986f33a10\\n```\\n\\n\\n\\n`@instructions`\\nUse the `SUM` function to get the total amount grossed by all films made in the year 2000 or later.\\n\\n`@hint`\\n```\\nSELECT ___(___)\\nFROM ___\\nWHERE ___ >= ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT SUM(gross)\\nFROM films\\nWHERE release_year >= 2000;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\nsum_call = temp.check_field('name').has_equal_ast('Are you calling the `SUM` function?')\\nsum_args = temp.check_field('args').has_equal_ast('Are you using using `SUM` on the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nwhere_release_year = where_clause.has_equal_ast(sql='release_year >= 2000', start='expression', exact=False, msg='Did you check the `release_year` correctly?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_release_year,\\n    sum_call,\\n    sum_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 65e81175c5\\n```\\n\\n\\n\\n`@instructions`\\nGet the average amount grossed by all films whose titles start with the letter 'A'.\\n\\n`@hint`\\n```\\nSELECT ___(___)\\nFROM ___\\nWHERE ___ LIKE 'A%';\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT AVG(gross)\\nFROM films\\nwhere title LIKE 'A%';\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\navg_call = temp.check_field('name').has_equal_ast('Are you calling the `AVG` function?')\\navg_args = temp.check_field('args').has_equal_ast('Are you using using `AVG` on the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nleft_like = where_clause.check_field('left').has_equal_ast('Are you using `title` with `LIKE`?')\\nop_like = where_clause.check_field('op').has_equal_ast('Are you using the `LIKE` operator in your `WHERE` clause?')\\n\\nright_like = where_clause.check_field('right').has_equal_ast(\\\"Are you using `LIKE` with `'A%'`?\\\")\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    left_like,\\n    op_like,\\n    right_like,\\n    avg_call,\\n    avg_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 3ca90a8536\\n```\\n\\n\\n\\n`@instructions`\\nGet the amount grossed by the worst performing film in 1994.\\n\\n`@hint`\\n```\\nSELECT ___(___)\\nFROM ___\\nWHERE ___ = ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT MIN(gross)\\nFROM films\\nWHERE release_year = 1994;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\nmin_call = temp.check_field('name').has_equal_ast('Are you calling the `MIN` function?')\\nmin_args = temp.check_field('args').has_equal_ast('Are you using using `MIN` on the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nwhere_release_year = where_clause.has_equal_ast(sql='release_year = 1994', start='expression', exact=False, msg='Did you check the `release_year` correctly?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_release_year,\\n    min_call,\\n    min_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: d2e630e656\\n```\\n\\n\\n\\n`@instructions`\\nGet the amount grossed by the best performing film between 2000 and 2012, inclusive.\\n\\n`@hint`\\n```\\nSELECT ___(___)\\nFROM ___\\nWHERE ___ BETWEEN ___ AND ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT MAX(gross)\\nFROM films\\nWHERE release_year BETWEEN 2000 AND 2012;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntemp = sel.check_node('Call')\\nmax_call = temp.check_field('name').has_equal_ast('Are you calling the `MAX` function?')\\nmax_args = temp.check_field('args').has_equal_ast('Are you using using `MAX` on the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nbetween_left = where_clause.check_field('left').has_equal_ast('Are you using `release_year` with `BETWEEN`?')\\nbetween_op1 = where_clause.check_field('right', 0).has_equal_ast('Check the first part of your `BETWEEN`!')\\nbetween_op2 = where_clause.check_field('right', 1).has_equal_ast('Check the second part of your `BETWEEN`!')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    between_left,\\n    between_op1,\\n    between_op2,\\n    max_call,\\n    max_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## A note on arithmetic\\n\\n```yaml\\ntype: MultipleChoiceExercise\\nlang: sql\\nxp: 50\\nskills: 1\\nkey: 7b8b54b64d\\n```\\n\\nIn addition to using aggregate functions, you can perform basic arithmetic with symbols like `+`, `-`, `*`, and `/`.\\n\\nSo, for example, this gives a result of `12`:\\n\\n```\\nSELECT (4 * 3);\\n```\\n\\nHowever, the following gives a result of `1`:\\n\\n```\\nSELECT (4 / 3);\\n```\\n\\nWhat's going on here?\\n\\nSQL assumes that if you divide an integer by an integer, you want to get an integer back. So be careful when dividing!\\n\\nIf you want more precision when dividing, you can add decimal places to your numbers. For example,\\n\\n```\\nSELECT (4.0 / 3.0) AS result;\\n```\\n\\ngives you the result you would expect: `1.333`.\\n\\n<hr>\\nWhat is the result of `SELECT (10 / 3);`?\\n\\n`@instructions`\\n- 2.333\\n- 3.333\\n- 3\\n- 3.0\\n\\n`@hint`\\nRun a query in the editor to the right.\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\n```\\n`@sample_code`\\n```{sql}\\n-- You can test out queries here!\\n```\\n\\n`@sct`\\n```{python}\\nsuccess_msg = 'Correct!'\\nmsg2 = \\\"Incorrect, try out the query in the editor!\\\"\\n\\nEx().test_mc(3,[msg2, msg2, success_msg, msg2])\\n```\\n\\n\\n\\n---\\n## It's AS simple AS aliasing\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: 9f4b026fe7\\n```\\n\\nYou may have noticed in the first exercise of this chapter that the column name of your result was just the name of the function you used. For example,\\n\\n```\\nSELECT MAX(budget)\\nFROM films;\\n```\\n\\ngives you a result with one column, named `max`. But what if you use two functions like this?\\n\\n```\\nSELECT MAX(budget), MAX(duration)\\nFROM films;\\n```\\n\\nWell, then you'd have two columns named `max`, which isn't very useful!\\n\\nTo avoid situations like this, SQL allows you to do something called _aliasing_. Aliasing simply means you assign a temporary name to something. To alias, you use the `AS` keyword, which you've already seen earlier in this course.\\n\\nFor example, in the above example we could use aliases to make the result clearer:\\n\\n```\\nSELECT MAX(budget) AS max_budget,\\n       MAX(duration) AS max_duration\\nFROM films;\\n```\\n\\nAliases are helpful for making results more readable!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: ec33c2353b\\n```\\n\\n\\n\\n`@instructions`\\nGet the title and net profit (the amount a film grossed, minus its budget) for all films. Alias the net profit as `net_profit`.\\n\\n`@hint`\\n```\\nSELECT ___, ___ - ___ AS ___\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, gross - budget AS net_profit\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title').has_equal_ast('Did you select the `title` column correctly?')\\n\\nalias = test_column('net_profit', match='exact', msg='Did you alias your result as `net_profit`?')\\n\\nalias_eqn = sel.check_node('AliasExpr').check_node('BinaryExpr')\\n\\nleft_eqn = alias_eqn.check_field('left').has_equal_ast('Are you using the `gross` column?')\\n\\nright_eqn = alias_eqn.check_field('right').has_equal_ast('Are you using the `budget` column?')\\n\\nop_eqn = alias_eqn.check_field('op').has_equal_ast('Are you subtracting `budget` from `gross`?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    alias_eqn,\\n    left_eqn,\\n    op_eqn,\\n    right_eqn,\\n    alias,\\n    title,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 1351c6f6bb\\n```\\n\\n\\n\\n`@instructions`\\nGet the title and duration in hours for all films. The duration is in minutes, so you'll need to divide by 60.0 to get the duration in hours. Alias the duration in hours as `duration_hours`.\\n\\n`@hint`\\n```\\nSELECT ___, ___ / 60.0 AS ___\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, duration / 60.0 AS duration_hours\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column correctly?')\\n\\nalias = test_column('duration_hours', match='exact', msg='Did you alias your result as `duration_hours`?', digits=4)\\n\\nalias_eqn = sel.check_node('AliasExpr').check_node('BinaryExpr')\\n\\nleft_eqn = alias_eqn.check_field('left').has_equal_ast('Are you using the `duration` column?')\\n\\nright_eqn = alias_eqn.check_field('right').has_equal_ast('Are you dividing the `duration` column by `60.0`?')\\n\\nop_eqn = alias_eqn.check_field('op').has_equal_ast('Are you dividing by `60.0`?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(alias, [\\n    from_clause,\\n    left_eqn,\\n    op_eqn,\\n    right_eqn,\\n    alias,\\n    title,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 497f8d2a8a\\n```\\n\\n\\n\\n`@instructions`\\nGet the average duration in hours for all films, aliased as `avg_duration_hours`.\\n\\n`@hint`\\n```\\nSELECT ___(___) / 60.0 AS avg_duration_hours  \\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT AVG(duration) / 60.0 AS avg_duration_hours  \\nFROM films;\\n```\\n`@sct`\\n```{python}\\n# TODO: come back to this with better solution once sqlwhat is patched\\nsel = check_node('SelectStmt')\\n\\nalias = test_column('avg_duration_hours', match='exact', msg='Did you alias your result as `avg_duration_hours`?', digits=4)\\n\\navg1 = test_student_typed('AVG\\\\(duration\\\\)\\\\s+\\\\/\\\\s+60.0', msg='Are you calling `AVG` correctly?')\\navg2 = test_student_typed('AVG\\\\(duration\\\\s+\\\\/\\\\s+60.0\\\\)', msg='Are you calling `AVG` correctly?')\\navg3 = test_student_typed('AVG\\\\(duration\\\\/60.0\\\\)', msg='Are you calling `AVG` correctly?')\\navg4 = test_student_typed('AVG\\\\(duration\\\\/60.0\\\\)', msg='Are you calling `AVG` correctly?')\\n\\n\\navg_call = test_or(avg1, avg2, avg3, avg4)\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(alias, [\\n    from_clause,\\n    avg_call,\\n    alias,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## Even more aliasing\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: 7e3a93209c\\n```\\n\\nLet's practice your newfound aliasing skills some more before moving on!\\n\\n\\n**Recall:** SQL assumes that if you divide an integer by an integer, you want to get an integer back. \\n\\nThis means that the following will erroneously result in `400.0`:\\n\\n```\\nSELECT 45 / 10 * 100.0;\\n```\\n\\nThis is because `45 / 10` evaluates to an integer (`4`), and not a decimal number like we would expect.\\n\\nSo when you're dividing make sure at least one of your numbers has a decimal place:\\n\\n```\\nSELECT 45 * 100.0 / 10;\\n```\\n\\nThe above now gives the correct answer of `450.0` as now the numerator of the division (`45 * 100.0`) is a decimal!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films', 'people'])\\n```\\n`@sample_code`\\n```{sql}\\n-- get the count(deathdate) and multiply by 100.0\\n-- then divide by count(*)\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: e14dc7c1a2\\n```\\n\\n\\n\\n`@instructions`\\nGet the percentage of `people` who are no longer alive. Alias the result as `percentage_dead`. Remember to use `100.0` and not `100`!\\n\\n`@hint`\\n```\\nSELECT ___(___) * 100.0 / ___(___) AS percentage_dead\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\n-- get the count(deathdate) and multiply by 100.0\\n-- then divide by count(*) \\nSELECT COUNT(deathdate) * 100.0 / COUNT(*) AS percentage_dead\\nFROM people;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nalias = test_column('percentage_dead', match='exact', msg='Did you alias your result as `percentage_dead`?')\\n\\nalias_eqn = sel.check_node('AliasExpr').check_node('BinaryExpr')\\n\\nleft_eqn = alias_eqn.check_node('BinaryExpr')\\n\\nright_eqn = alias_eqn.check_node('Call').has_equal_ast('Are you dividing by `COUNT(*)`?')\\n\\ntemp = left_eqn.check_field('left')\\n\\ncount_call = temp.check_field('name').has_equal_ast('Are you using the `COUNT` function for the top of your fraction?')\\n\\ncount_args = temp.check_field('args').has_equal_ast('Are you using `COUNT` on the right column?')\\n\\nop_eqn = left_eqn.check_field('op').has_equal_ast('Are you multiplying `COUNT(deathdate)` by `100.00`?')\\n\\nright_left_eqn = left_eqn.check_field('right').has_equal_ast('Make sure to multiply the top by `100.0`!')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    count_call,\\n    count_args,\\n    op_eqn,\\n    right_left_eqn,\\n    right_eqn,\\n    alias,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: c2bbd9a806\\n```\\n\\n\\n\\n`@instructions`\\nGet the number of years between the newest film and oldest film. Alias the result as `difference`.\\n\\n`@hint`\\n```\\nSELECT ___(___) - ___(___)\\nAS difference\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT MAX(release_year) - MIN(release_year)\\nAS difference\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nalias = test_column('difference', match='exact', msg='Did you alias your result as `difference`?')\\n\\nalias_eqn = sel.check_node('AliasExpr').check_node('BinaryExpr')\\n\\nleft_eqn = alias_eqn.check_field('left')\\nright_eqn = alias_eqn.check_field('right')\\n\\nmax_call = left_eqn.check_field('name').has_equal_ast('Did you use `MAX` function to get the oldest film?')\\nmax_args = left_eqn.check_field('args').has_equal_ast('Are you using `MAX` on the right column?')\\n\\nmin_call = right_eqn.check_field('name').has_equal_ast('Did you use the `MIN` function to get the newest film?')\\nmin_args = right_eqn.check_field('args').has_equal_ast('Are you using `MIN` on the right column?')\\n\\nop_eqn = alias_eqn.check_field('op').has_equal_ast('Are you subtracting the most recent year from the least recent year?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    max_call,\\n    max_args,\\n    op_eqn,\\n    min_call,\\n    min_args,\\n    alias,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: f272486b68\\n```\\n\\n\\n\\n`@instructions`\\nGet the number of decades the `films` table covers. Alias the result as `number_of_decades`. The top half of your fraction should be enclosed in parentheses.\\n\\n`@hint`\\n```\\nSELECT (___(___) - ___(___)) / 10.0\\nAS number_of_decades\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT (MAX(release_year) - MIN(release_year)) / 10.0\\nAS number_of_decades\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nalias = test_column('number_of_decades', match='exact', msg='Did you alias your result as `number_of_decades`?')\\n\\nalias_eqn = sel.check_node('AliasExpr').check_node('BinaryExpr')\\n\\nleft_eqn = alias_eqn.check_field('left')\\n\\nmax_node = left_eqn.check_field('left')\\n\\nmax_call = max_node.check_field('name').has_equal_ast('Did you use the `MAX` function to get the most recent year?')\\nmax_args = max_node.check_field('args').has_equal_ast('Did you use `MAX` on the right column?')\\n\\nmin_node = left_eqn.check_field('right')\\n\\nmin_call = min_node.check_field('name').has_equal_ast('Did you use the `MIN` function to get the least recent year?')\\nmin_args = min_node.check_field('args').has_equal_ast('Did you use `MIN` on the right column?')\\n\\nop_eqn = left_eqn.check_field('op').has_equal_ast('Are you subtracting the newest year from the oldest year?')\\n\\nother_op = alias_eqn.check_field('op').has_equal_ast(\\\"Don't forget to divide by `10.0`!\\\")\\n\\nten = alias_eqn.check_field('right').has_equal_ast('Did you divide by `10.0`?')\\n\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    max_call,\\n    max_args,\\n    op_eqn,\\n    min_call,\\n    min_args,\\n    other_op,\\n    ten,\\n    alias,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\",\"sha\":\"ac5c96e7d1de41331eebf619074643eac2d5ae5b\",\"lastSavedSha\":\"ac5c96e7d1de41331eebf619074643eac2d5ae5b\"},\"chapter4.md\":{\"content\":\"---\\ntitle: Sorting, grouping and joins\\ndescription: >-\\n  This chapter provides a brief introduction to sorting and grouping your results, and briefly touches on the concept of joins.\\n\\n\\n---\\n## ORDER BY\\n\\n```yaml\\ntype: PlainMultipleChoiceExercise\\nlang: sql\\nxp: 50\\n\\nkey: 322af4938b\\n```\\n\\nCongratulations on making it this far! You now know how to select and filter your results.\\n\\nIn this chapter you'll learn how to sort and group your results to gain further insight. Let's go!\\n\\nIn SQL, the `ORDER BY` keyword is used to sort results in ascending or descending order according to the values of one or more columns. \\n\\nBy default `ORDER BY` will sort in ascending order. If you want to sort the results in descending order, you can use the `DESC` keyword. For example,\\n\\n```\\nSELECT title\\nFROM films\\nORDER BY release_year DESC;\\n```\\n\\ngives you the titles of films sorted by release year, from newest to oldest.\\n\\n<hr>\\nHow do you think `ORDER BY` sorts a column of text values by default? adf\\n\\n`@instructions`\\n- Alphabetically (A-Z)\\n- Reverse alphabetically (Z-A)\\n- There's no natural ordering to text data\\n- By number of characters (fewest to most)\\n\\n`@hint`\\nBy default, `ORDER BY` sorts alphabetically, but in which direction?\\n\\n\\n\\n\\n`@sct`\\n```{python}\\nsuccess_msg = 'Correct!'\\nmsg1 = \\\"Incorrect. Although text values are ordered alphabetically, they don't go Z-A.\\\"\\nmsg2 = 'Incorrect. Text values are ordered alphabetically.'\\n\\nEx().test_mc(1, [success_msg, msg1, msg2, msg2])\\n```\\n\\n\\n\\n---\\n## Sorting single columns\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: a7b2964ba6\\n```\\n\\nNow that you understand how `ORDER BY` works, give these exercises a go!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films', 'people'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: e3a06cce15\\n```\\n\\n\\n\\n`@instructions`\\nGet the names of people from the `people` table, sorted alphabetically.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___\\nORDER BY ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT name\\nFROM people\\nORDER BY name;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nname = test_column('name', msg='Did you select the `name` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\norder_by_clause = sel.check_field('order_by_clause').has_equal_ast('Is your `ORDER BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    order_by_clause,\\n    from_clause,\\n    name,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 14a2792baa\\n```\\n\\n\\n\\n`@instructions`\\nGet the names of people, sorted by birth date.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___\\nORDER BY ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT name\\nFROM people\\nORDER BY birthdate;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nname = test_column('name', msg='Did you select the `name` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\norder_by_clause = sel.check_field('order_by_clause').has_equal_ast('Is your `ORDER BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    order_by_clause,\\n    from_clause,\\n    name,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 6cfeca71b1\\n```\\n\\n\\n\\n`@instructions`\\nGet the birth date and name for every person, in order of when they were born.\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___\\nORDER BY ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT birthdate, name\\nFROM people\\nORDER BY birthdate;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nbirthdate = test_column('birthdate', msg='Did you select the `birthdate` column correctly?')\\n\\nname = test_column('name', msg='Did you select the `name` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\norder_by_clause = sel.check_field('order_by_clause').has_equal_ast('Is your `ORDER BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    order_by_clause,\\n    from_clause,\\n    birthdate,\\n    name,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## Sorting single columns (2)\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: 357ec9bc3d\\n```\\n\\nLet's get some more practice with `ORDER BY`! adsf\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films', 'people'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: e2702b5933\\n```\\n\\n\\n\\n`@instructions`\\nGet the title of films released in 2000 or 2012, in the order they were released.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___\\nWHERE ___ IN (___, ___)\\nORDER BY ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title\\nFROM films\\nWHERE release_year IN (2000, 2012)\\nORDER BY release_year;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\norder_by_clause = sel.check_field('order_by_clause').has_equal_ast('Is your `ORDER BY` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nin_thing = where_clause.has_equal_ast(sql=\\\"release_year IN (2000, 2012)\\\", start='expression', exact=False, msg='Did you use `IN` correctly?')\\n\\nEx().test_correct(check_result(), [\\n    order_by_clause,\\n    from_clause,\\n    in_thing,\\n    title,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 5c84507976\\n```\\n\\n\\n\\n`@instructions`\\nGet all details for all films except those released in 2015 and order them by duration.\\n\\n`@hint`\\n```{sql}\\nSELECT ___\\nFROM ___\\nWHERE ___ <> ___\\nORDER BY ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT *\\nFROM films\\nWHERE release_year <> 2015\\nORDER BY duration;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nstar = sel.check_node('Star').has_equal_ast('Are you selecting all columns correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nwhere_release_year = where_clause.has_equal_ast(sql=\\\"release_year <> 2015\\\", start='expression', exact=False, msg='Did you use check the `release_year` with `<>` correctly in your `WHERE` clause?')\\n\\norder_by_clause = sel.check_field('order_by_clause').has_equal_ast('Is your `ORDER BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    order_by_clause,\\n    where_release_year,\\n    star,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 6359addbf8\\n```\\n\\n\\n\\n`@instructions`\\nGet the title and gross earnings for movies which begin with the letter 'M' and order the results alphabetically.\\n\\n`@hint`\\n```{sql}\\nSELECT ___, ___\\nFROM ___\\nWHERE ___ LIKE ___\\nORDER BY ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, gross\\nFROM films\\nWHERE title LIKE 'M%'\\nORDER BY title;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column correctly?')\\n\\ngross = test_column('gross', msg='Did you select the `gross` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nleft_like = where_clause.check_field('left').has_equal_ast('Are you using `title` with `LIKE`?')\\nop_like = where_clause.check_field('op').has_equal_ast('Are you using the `LIKE` operator in your `WHERE` clause?')\\nright_like = where_clause.check_field('right').has_equal_ast(\\\"Are you using `LIKE` with `'M%'`?\\\")\\n\\norder_by_clause = sel.check_field('order_by_clause').has_equal_ast('Is your `ORDER BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    order_by_clause,\\n    left_like,\\n    op_like,\\n    right_like,\\n    title,\\n    gross,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## Sorting single columns (DESC)\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: a7b2964ba7\\n```\\n\\nTo order results in _descending_ order, you can put the keyword `DESC` after your `ORDER BY`. For example, to get all the names in the `people` table, in reverse alphabetical order:\\n\\n```\\nSELECT name\\nFROM people\\nORDER BY name DESC;\\n```\\n\\nNow practice using `ORDER BY` with `DESC` to sort single columns in descending order!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films', 'reviews'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 1ed651456d\\n```\\n\\n\\n\\n`@instructions`\\nGet the IMDB score and film ID for every film from the reviews table, sorted from highest to lowest score.\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___\\nORDER BY ___ DESC;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT imdb_score, film_id\\nFROM reviews\\nORDER BY imdb_score DESC;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nimdb_score = test_column('imdb_score', msg='Did you select the `imdb_score` column correctly?')\\nfilm_id = test_column('film_id', msg='Did you select the `film_id` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\norder_by_clause = sel.check_field('order_by_clause').has_equal_ast('Is your `ORDER BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    order_by_clause,\\n    from_clause,\\n    imdb_score,\\n    film_id,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 3629dd5dcd\\n```\\n\\n\\n\\n`@instructions`\\nGet the title for every film, in reverse order.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___\\nORDER BY ___ ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title\\nFROM films\\nORDER BY title DESC;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\norder_by_clause = sel.check_field('order_by_clause').has_equal_ast('Is your `ORDER BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    order_by_clause,\\n    from_clause,\\n    title,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: ddcb2dd3ad\\n```\\n\\n\\n\\n`@instructions`\\nGet the title and duration for every film, in order of longest duration to shortest.\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___\\nORDER BY ___ ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, duration\\nFROM films\\nORDER BY duration DESC;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column correctly?')\\n\\nduration = test_column('duration', msg='Did you select the `duration` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\norder_by_clause = sel.check_field('order_by_clause').has_equal_ast('Is your `ORDER BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    order_by_clause,\\n    from_clause,\\n    title,\\n    duration,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## Sorting multiple columns\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: b2a52993bc\\n```\\n\\n`ORDER BY` can also be used to sort on multiple columns. It will sort by the first column specified, then sort by the next, then the next, and so on. For example,\\n\\n```\\nSELECT birthdate, name\\nFROM people\\nORDER BY birthdate, name;\\n```\\n\\nsorts on birth dates first (oldest to newest) and then sorts on the names in alphabetical order. **The order of columns is important!**\\n\\nTry using `ORDER BY` to sort multiple columns! Remember, to specify multiple columns you separate the column names with a comma.\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films', 'people'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 9ec6e8ae72\\n```\\n\\n\\n\\n`@instructions`\\nGet the birth date and name of people in the `people` table, in order of when they were born and alphabetically by name.\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___\\nORDER BY ___, ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT birthdate, name\\nFROM people\\nORDER BY birthdate, name;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nbirthdate = test_column('birthdate', msg='Did you select the `birthdate` column correctly?')\\n\\nname = test_column('name', msg='Did you select the `name` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\norder_by_clause = sel.check_field('order_by_clause').has_equal_ast('Is your `ORDER BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    order_by_clause,\\n    from_clause,\\n    birthdate,\\n    name,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 3460b2f14b\\n```\\n\\n\\n\\n`@instructions`\\nGet the release year, duration, and title of films ordered by their release year and duration.\\n\\n`@hint`\\n```\\nSELECT ___, ___, ___\\nFROM ___\\nORDER BY ___, ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT release_year, duration, title\\nFROM films\\nORDER BY release_year, duration;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column correctly?')\\n\\nduration = test_column('duration', msg='Did you select the `duration` column correctly?')\\n\\ntitle = test_column('title', msg='Did you select the `title` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\norder_by_clause = sel.check_field('order_by_clause').has_equal_ast('Is your `ORDER BY` clause corect?')\\n\\nEx().test_correct(check_result(), [\\n    order_by_clause,\\n    from_clause,\\n    release_year,\\n    duration,\\n    title,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: c03517c2b9\\n```\\n\\n\\n\\n`@instructions`\\nGet certifications, release years, and titles of films ordered by certification (alphabetically) and release year.\\n\\n`@hint`\\n```\\nSELECT ___, ___, ___\\nFROM ___\\nORDER BY ___, ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT certification, release_year, title\\nFROM films\\nORDER BY certification, release_year;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ncertification = test_column('certification', msg='Did you select the `certification` column correctly?')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column correctly?')\\n\\ntitle = test_column('title', msg='Did you select the `title` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\norder_by_clause = sel.check_field('order_by_clause').has_equal_ast('Is your `ORDER BY` clause corect?')\\n\\nwhere_clause = sel.check_field('where_clause').has_equal_ast('Is your `WHERE` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    order_by_clause,\\n    from_clause,\\n    certification,\\n    release_year,\\n    title,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: f0ade213ff\\n```\\n\\n\\n\\n`@instructions`\\nGet the names and birthdates of people ordered by name and birth date.\\n\\n`@hint`\\n```\\nSELECT ___, ___\\nFROM ___\\nORDER BY ___, ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT name, birthdate\\nFROM people\\nORDER BY name, birthdate;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nname = test_column('name', msg='Did you select the `name` column correctly?')\\n\\nbirthdate = test_column('birthdate', msg='Did you select the `birthdate` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause')\\n\\nwhere_clause = sel.check_field('where_clause').has_equal_ast('Is your `WHERE` clause correct?')\\n\\norder_by_clause = sel.check_field('order_by_clause').has_equal_ast('Is your `ORDER BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    order_by_clause,\\n    from_clause,\\n    name,\\n    birthdate,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## GROUP BY\\n\\n```yaml\\ntype: PlainMultipleChoiceExercise\\nlang: sql\\nxp: 50\\n\\nkey: 81987a99cf\\n```\\n\\nNow you know how to sort results! Often you'll need to aggregate results. For example, you might want to get count the number of male and female employees in your company. Here, what you want is to group all the males together and count them, and group all the females together and count them. In SQL, `GROUP BY` allows you to group a result by one or more columns, like so:\\n\\n```\\nSELECT sex, count(*)\\nFROM employees\\nGROUP BY sex;\\n```\\n\\nThis might give, for example:\\n\\n| sex | count |\\n|----|----|\\n| male | 15 |\\n| female | 19 |\\n\\n<br>\\nCommonly, `GROUP BY` is used with _aggregate functions_ like `COUNT()` or `MAX()`. Note that `GROUP BY` always goes after the `FROM` clause!\\n\\n<hr>\\nWhat is `GROUP BY` used for?\\n\\n`@instructions`\\n- Performing operations by column\\n- Performing operations all at once\\n- Performing operations in a particular order\\n- Performing operations by group\\n\\n`@hint`\\nYou use `GROUP BY` when you want to compute results within groups.\\n\\n\\n\\n\\n`@sct`\\n```{python}\\none = 'Incorrect. While `GROUP BY` does sort by column, we could just use `ORDER BY` for this.'\\ntwo = 'Incorrect.'\\nthree = \\\"Incorrect. While `GROUP BY` does sort results, it's not designed to control order of operations.\\\"\\nsuccess_msg = 'Correct! `GROUP BY` is for performing operations within groups.'\\n\\nEx().test_mc(4, [one, two, three, success_msg])\\n```\\n\\n\\n\\n---\\n## GROUP BY practice\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: 98e30a6131\\n```\\n\\nAs you've just seen, combining aggregate functions with `GROUP BY` can yield some powerful results!\\n\\nA word of warning: SQL will return an error if you try to `SELECT` a field that is not in your `GROUP BY` clause without using it to calculate some kind of value about the entire group.\\n\\nNote that you can combine `GROUP BY` with `ORDER BY` to group your results, calculate something about them, and then order your results. For example,\\n\\n```\\nSELECT sex, count(*)\\nFROM employees\\nGROUP BY sex\\nORDER BY count DESC;\\n```\\n\\nmight return something like\\n\\n| sex | count |\\n|----|----|\\n| female | 19 |\\n| male | 15 |\\n\\n<br>\\nbecause there are more females at our company than males. Note also that `ORDER BY` always goes after `GROUP BY`. Let's try some exercises!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films', 'reviews'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 0b29eb4ff3\\n```\\n\\n\\n\\n`@instructions`\\nGet the release year and count of films released in each year.\\n\\n`@hint`\\n```\\nSELECT ___, ___(___)\\nFROM ___\\nGROUP BY ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT release_year, COUNT(*)\\nFROM films\\nGROUP BY release_year;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column correctly?')\\n\\ntemp = sel.check_node('Call')\\ncount_call = temp.check_field('name').has_equal_ast('Did you use the `COUNT` function?')\\ncount_args = temp.check_field('args').has_equal_ast('Are you using `COUNT` on the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\ngroup_by_clause = sel.check_field('group_by_clause').has_equal_ast('Is your `GROUP BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    group_by_clause,\\n    from_clause,\\n    release_year,\\n    count_call,\\n    count_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: ebee043890\\n```\\n\\n\\n\\n`@instructions`\\nGet the release year and average duration of all films, grouped by release year.\\n\\n`@hint`\\n```\\nSELECT ___, ___(___)\\nFROM ___\\nGROUP BY ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT release_year, AVG(duration)\\nFROM films\\nGROUP BY release_year;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column correctly?')\\n\\ntemp = sel.check_node('Call')\\navg_call = temp.check_field('name').has_equal_ast('Did you use the `AVG` function?')\\navg_args = temp.check_field('args').has_equal_ast('Are you using `AVG` on the right column?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\ngroup_by_clause = sel.check_field('group_by_clause').has_equal_ast('Is your `GROUP BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    group_by_clause,\\n    from_clause,\\n    release_year,\\n    avg_call,\\n    avg_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: b4341b8451\\n```\\n\\n\\n\\n`@instructions`\\nGet the release year and largest budget for all films, grouped by release year.\\n\\n`@hint`\\n```\\nSELECT ___, ___(___)\\nFROM ___\\nGROUP BY ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT release_year, MAX(budget)\\nFROM films\\nGROUP BY release_year;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column correctly?')\\n\\ntemp = sel.check_node('Call')\\nmax_call = temp.check_field('name').has_equal_ast('Did you use the `MAX` function?')\\nmax_args = temp.check_field('args').has_equal_ast('Are you using `MAX` on the right column?')\\n\\nfrom_clause = sel.check_field('where_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\ngroup_by_clause = sel.check_field('group_by_clause').has_equal_ast('Is your `GROUP BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    group_by_clause,\\n    from_clause,\\n    release_year,\\n    max_call,\\n    max_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 66d0c5198a\\n```\\n\\n\\n\\n`@instructions`\\nGet the IMDB score and count of film reviews grouped by IMDB score in the `reviews` table.\\n\\n`@hint`\\n```\\nSELECT ___, ___(___)\\nFROM ___\\nGROUP BY ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT imdb_score, COUNT(*)\\nFROM reviews\\nGROUP BY imdb_score;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nimdb_score = test_column('imdb_score', msg='Did you select the `imdb_score` column correctly?')\\n\\ntemp = sel.check_node('Call')\\n\\ncount_call = temp.check_field('name').has_equal_ast('Are you calling the `COUNT` function?')\\n\\ncount_args = temp.check_field('args').has_equal_ast('Are you using `COUNT` on the right column?')\\n\\nfrom_clause = sel.check_field('where_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\ngroup_by_clause = sel.check_field('group_by_clause').has_equal_ast('Is your `GROUP BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    group_by_clause,\\n    from_clause,\\n    imdb_score,\\n    count_call,\\n    count_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## GROUP BY practice (2)\\n\\n```yaml\\ntype: BulletExercise\\nlang: sql\\nxp: 100\\n\\nkey: 38a7c62434\\n```\\n\\nNow practice your new skills by combining `GROUP BY` and `ORDER BY` with some more aggregate functions!\\n\\nMake sure to always put the `ORDER BY` clause at the end of your query. You can't sort values that you haven't calculated yet!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 53ad6da98c\\n```\\n\\n\\n\\n`@instructions`\\nGet the release year and lowest gross earnings per release year.\\n\\n`@hint`\\n```\\nSELECT ___, ___(___)\\nFROM ___\\nGROUP BY ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT release_year, MIN(gross)\\nFROM films\\nGROUP BY release_year;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column correctly?')\\n\\ntemp = sel.check_node('Call')\\nmin_call = temp.check_field('name').has_equal_ast('Did you use the `MIN` function?')\\nmin_args = temp.check_field('args').has_equal_ast('Are you using `MIN` on the right column?')\\n\\nfrom_clause = sel.check_field('where_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\ngroup_by_clause = sel.check_field('group_by_clause').has_equal_ast('Is your `GROUP BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    group_by_clause,\\n    from_clause,\\n    release_year,\\n    min_call,\\n    min_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: cff5924de5\\n```\\n\\n\\n\\n`@instructions`\\nGet the language and total gross amount films in each language made.\\n\\n`@hint`\\n```\\nSELECT ___, ___(___)\\nFROM ___\\nGROUP BY ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT language, SUM(gross)\\nFROM films\\nGROUP BY language;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nlanguage = test_column('language', msg='Did you select the `language` column correctly?')\\n\\ntemp = sel.check_node('Call')\\nsum_call = temp.check_field('name').has_equal_ast('Did you use the `SUM` function?')\\nsum_args = temp.check_field('args').has_equal_ast('Are you using `SUM` on the right column?')\\n\\nfrom_clause = sel.check_field('where_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\ngroup_by_clause = sel.check_field('group_by_clause').has_equal_ast('Is your `GROUP BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    group_by_clause,\\n    from_clause,\\n    language,\\n    sum_call,\\n    sum_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 83944ff64f\\n```\\n\\n\\n\\n`@instructions`\\nGet the country and total budget spent making movies in each country.\\n\\n`@hint`\\n```\\nSELECT ___, ___(___)\\nFROM ___\\nGROUP BY ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT country, SUM(budget)\\nFROM films\\nGROUP BY country;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ncountry = test_column('country', msg='Did you select the `country` column correctly?')\\n\\ntemp = sel.check_node('Call')\\nsum_call = temp.check_field('name').has_equal_ast('Did you use the `SUM` function?')\\nsum_args = temp.check_field('args').has_equal_ast('Are you using `SUM` on the right column?')\\n\\nfrom_clause = sel.check_field('where_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\ngroup_by_clause = sel.check_field('group_by_clause').has_equal_ast('Is your `GROUP BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    group_by_clause,\\n    from_clause,\\n    sum_call,\\n    country,\\n    sum_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: eac5f722a5\\n```\\n\\n\\n\\n`@instructions`\\nGet the release year, country, and highest budget spent making a film for each year, for each country. Sort your results by release year and country.\\n\\n`@hint`\\n```\\nSELECT ___, ___, ___(___)\\nFROM ___\\nGROUP BY ___, ___\\nORDER BY ___, ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT release_year, country, MAX(budget)\\nFROM films\\nGROUP BY release_year, country\\nORDER BY release_year, country;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column correctly?')\\n\\ncountry = test_column('country', msg='Did you select the `country` column correctly?')\\n\\ntemp = sel.check_node('Call')\\nmax_call = temp.check_field('name').has_equal_ast('Did you use the `MAX` function?')\\nmax_args = temp.check_field('args').has_equal_ast('Are you using `MAX` on the right column?')\\n\\nfrom_clause = sel.check_field('where_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\norder_by_clause = sel.check_field('order_by_clause').has_equal_ast('Is your `ORDER BY` clause correct?')\\n\\ngroup_by_clause = sel.check_field('group_by_clause').has_equal_ast('Is your `GROUP BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    order_by_clause,\\n    group_by_clause,\\n    from_clause,\\n    max_call,\\n    max_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 48461bd4d3\\n```\\n\\n\\n\\n`@instructions`\\nGet the country, release year, and lowest amount grossed per release year per country. Order your results by country and release year.\\n\\n`@hint`\\n```\\nSELECT ___, ___, ___(___)\\nFROM films\\nGROUP BY country, release_year\\nORDER BY ___, ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT country, release_year, MIN(gross)\\nFROM films\\nGROUP BY country, release_year\\nORDER BY country, release_year;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column correctly?')\\n\\ncountry = test_column('country', msg='Did you select the `country` column correctly?')\\n\\ntemp = sel.check_node('Call')\\nmin_call = temp.check_field('name').has_equal_ast('Did you use the `MIN` function?')\\nmin_args = temp.check_field('args').has_equal_ast('Are you using `MIN` on the right column?')\\n\\nfrom_clause = sel.check_field('where_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\norder_by_clause = sel.check_field('order_by_clause').has_equal_ast('Is your `ORDER BY` clause correct?')\\n\\ngroup_by_clause = sel.check_field('group_by_clause').has_equal_ast('Is your `GROUP BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    order_by_clause,\\n    group_by_clause,\\n    from_clause,\\n    country,\\n    release_year,\\n    min_call,\\n    min_args,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## HAVING a great time\\n\\n```yaml\\ntype: MultipleChoiceExercise\\nlang: sql\\nxp: 50\\n\\nkey: a391d35885\\n```\\n\\nIn SQL, aggregate functions can't be used in `WHERE` clauses. For example, the following query is invalid:\\n\\n```\\nSELECT release_year\\nFROM films\\nGROUP BY release_year\\nWHERE COUNT(title) > 10;\\n```\\n\\nThis means that if you want to filter based on the result of an aggregate function, you need another way! That's where the `HAVING` clause comes in. For example,\\n\\n```\\nSELECT release_year\\nFROM films\\nGROUP BY release_year\\nHAVING COUNT(title) > 10;\\n```\\n\\nshows only those years in which more than 10 films were released.\\n\\n<hr>\\nIn how many different years were more than 200 movies released?\\n\\n`@instructions`\\n- 12\\n- 13\\n- 14\\n- 15\\n\\n`@hint`\\nReplace 10 with 200 in the query above and run it in the editor.\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films'])\\n```\\n`@sample_code`\\n```{sql}\\n-- You can test out queries here!\\n```\\n\\n`@sct`\\n```{python}\\nmsg1 = 'Correct!'\\nmsg2 = 'Incorrect! Make a small modification to the query above and run it in the editor.'\\n\\nEx().test_mc(2, [msg2, msg1, msg2, msg2])\\n```\\n\\n\\n\\n---\\n## All together now\\n\\n```yaml\\ntype: TabExercise\\nlang: sql\\nxp: 100\\n\\nkey: f7dcb9e122\\n```\\n\\nTime to practice using `ORDER BY`, `GROUP BY` and `HAVING` together.\\n\\nNow you're going to write a query that returns the average budget and average gross earnings for films in each year after 1990, if the average budget is greater than $60 million.\\n\\nThis is going to be a big query, but you can handle it!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films'])\\n```\\n\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: a141cd669f\\n```\\n\\n\\n\\n`@instructions`\\nGet the release year, budget and gross earnings for each film in the `films` table.\\n\\n`@hint`\\n```\\nSELECT ___, ___, ___\\nFROM ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT release_year, budget, gross\\nFROM films;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column correctly?')\\n\\nbudget = test_column('budget', msg='Did you select the `budget` column correctly?')\\n\\ngross = test_column('gross', msg='Did you select the `release_year` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    release_year,\\n    budget,\\n    gross,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: d80bd57b13\\n```\\n\\n\\n\\n`@instructions`\\nModify your query so that only results after 1990 are included.\\n\\n`@hint`\\n```\\nSELECT ___, ___, ___\\nFROM ___\\nWHERE ___ > ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT release_year, budget, gross\\nFROM films\\nWHERE release_year > 1990;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column correctly?')\\n\\nbudget = test_column('budget', msg='Did you select the `budget` column correctly?')\\n\\ngross = test_column('gross', msg='Did you select the `gross` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nwhere_release_year = where_clause.has_equal_ast(sql='release_year > 1990', start='expression', exact=False, msg='Did you check the `release_year` correctly in your `WHERE` clause?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_release_year,\\n    release_year,\\n    budget,\\n    gross,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 2d5e6bd8cf\\n```\\n\\n\\n\\n`@instructions`\\nRemove the budget and gross columns, and group your results by release year.\\n\\n`@hint`\\n```\\nSELECT ___\\nFROM ___\\nWHERE ___ > ___\\nGROUP BY ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT release_year\\nFROM films\\nWHERE release_year > 1990\\nGROUP BY release_year;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\ngroup_by_clause = sel.check_field('group_by_clause').has_equal_ast('Is your `GROUP BY` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\n\\nwhere_release_year = where_clause.has_equal_ast(sql='release_year > 1990', start='expression', exact=False, msg='Did you check the `release_year` correctly in your `WHERE` clause?')\\n\\nEx().test_correct(check_result(), [\\n    group_by_clause,\\n    from_clause,\\n    where_clause,\\n    release_year,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: ee92d8cbaa\\n```\\n\\n\\n\\n`@instructions`\\nModify your query to add in the average budget and average gross earnings for the results you have so far. Alias your results as `avg_budget` and `avg_gross`, respectively.\\n\\n`@hint`\\n```\\nSELECT ___, ___(___) AS avg_budget, AVG(gross) AS avg_gross\\nFROM ___\\nWHERE ___ > ___\\nGROUP BY ___;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT release_year, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross\\nFROM films\\nWHERE release_year > 1990\\nGROUP BY release_year;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\nwhere_release_year = where_clause.has_equal_ast(sql='release_year > 1990', start='expression', exact=False, msg='Did you check the `release_year` correctly in your `WHERE` clause?')\\n\\ngroup_by_clause = sel.check_field('group_by_clause').has_equal_ast('Is your `GROUP BY` clause correct?')\\n\\nalias1 = test_column('avg_budget', match='exact', msg='Are you aliasing `avg_budget` correctly?')\\nalias2 = test_column('avg_gross', match='exact', msg='Are you aliasing `avg_gross` correctly?')\\n\\nEx().test_correct(check_result(), [\\n    group_by_clause,\\n    where_clause,\\n    from_clause,\\n    where_release_year,\\n    alias1,\\n    alias2,\\n    release_year,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: ce0f248734\\n```\\n\\n\\n\\n`@instructions`\\nModify your query so that only years with an average budget of greater than $60 million are included.\\n\\n`@hint`\\n```\\nSELECT ___, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross\\nFROM ___\\nWHERE ___ > ___\\nGROUP BY ___\\nHAVING AVG(___) > 60000000;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT release_year, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross\\nFROM films\\nWHERE release_year > 1990\\nGROUP BY release_year\\nHAVING AVG(budget) > 60000000;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\nwhere_release_year = where_clause.has_equal_ast(sql='release_year > 1990', start='expression', exact=False, msg='Did you check the `release_year` correctly in your `WHERE` clause?')\\n\\ngroup_by_clause = sel.check_field('group_by_clause').has_equal_ast('Is your `GROUP BY` clause correct?')\\n\\nalias1 = test_column('avg_budget', match='exact', msg='Are you aliasing `avg_budget` correctly?')\\nalias2 = test_column('avg_gross', match='exact', msg='Are you aliasing `avg_gross` correctly?')\\n\\nhaving_clause = sel.check_field('having_clause').has_equal_ast('Is your `HAVING` clause correct?')\\n\\navg_in_having = having_clause.check_node('Call').has_equal_ast('Are you correctly calling `AVG` on `budget` in your `HAVING` clause?')\\n\\nEx().test_correct(check_result(), [\\n    group_by_clause,\\n    avg_in_having,\\n    having_clause,\\n    from_clause,\\n    where_release_year,\\n    alias1,\\n    alias2,\\n    release_year,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 7b3afeed2f\\n```\\n\\n\\n\\n`@instructions`\\nFinally, modify your query to order the results from highest average gross earnings to lowest.\\n\\n`@hint`\\n```\\nSELECT ___, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross\\nFROM ___\\nWHERE ___ > ___\\nGROUP BY ___\\nHAVING AVG(___) > 60000000\\nORDER BY ___ DESC;\\n```\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT release_year, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross\\nFROM films\\nWHERE release_year > 1990\\nGROUP BY release_year\\nHAVING AVG(budget) > 60000000\\nORDER BY avg_gross DESC;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\nrelease_year = test_column('release_year', msg='Did you select the `release_year` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause')\\nwhere_release_year = where_clause.has_equal_ast(sql='release_year > 1990', start='expression', exact=False, msg='Did you check the `release_year` correctly in your `WHERE` clause?')\\n\\ngroup_by_clause = sel.check_field('group_by_clause').has_equal_ast('Is your `GROUP BY` clause correct?')\\n\\nalias1 = test_column('avg_budget', match='exact', msg='Are you aliasing `avg_budget` correctly?')\\nalias2 = test_column('avg_gross', match='exact', msg='Are you aliasing `avg_gross` correctly?')\\n\\nhaving_clause = sel.check_field('having_clause').has_equal_ast('Is your `HAVING` clause correct?')\\n\\navg_in_having = having_clause.check_node('Call').has_equal_ast('Are you correctly calling `AVG` on `budget` in your `HAVING` clause?')\\n\\norder_by_clause = sel.check_field('order_by_clause').has_equal_ast('Is your `ORDER BY` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    order_by_clause,\\n    group_by_clause,\\n    avg_in_having,\\n    having_clause,\\n    from_clause,\\n    where_release_year,\\n    alias1,\\n    alias2,\\n    release_year,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n---\\n## All together now (2)\\n\\n```yaml\\ntype: NormalExercise\\nlang: sql\\nxp: 100\\nskills: 1\\nkey: 0bbc6da34d\\n```\\n\\nGreat work! Now try another large query. This time, all in one go!\\n\\nRemember, if you only want to return a certain number of results, you can use the `LIMIT` keyword to limit the number of rows returned\\n\\n`@instructions`\\nGet the country, average budget, and average gross take of countries that have made more than 10 films. Order the result by country name, and limit the number of results displayed to 5. You should alias the averages as `avg_budget` and `avg_gross` respectively.\\n\\n`@hint`\\n```\\nSELECT ___, AVG(budget) AS avg_budget, ___(gross) AS avg_gross\\nFROM films\\nGROUP BY ___\\nHAVING COUNT(title) > 10\\nORDER BY ___\\nLIMIT 5;\\n```\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films'])\\n```\\n`@sample_code`\\n```{sql}\\n-- select country, average budget, average gross\\n\\n-- from the films table\\n\\n-- group by country \\n\\n-- where the country has a title count greater than 10\\n\\n-- order by country\\n\\n-- limit to only show 5 results\\n```\\n`@solution`\\n```{sql}\\n-- select country, average budget, average gross\\nSELECT country, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross\\n-- from the films table\\nFROM films\\n-- group by country \\nGROUP BY country\\n-- where the country has a title count greater than 10\\nHAVING COUNT(title) > 10\\n-- order by country\\nORDER BY country\\n-- limit to only show 5 results\\nLIMIT 5;\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ncountry = test_column('country', msg='Did you select the `country` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\nwhere_clause = sel.check_field('where_clause').has_equal_ast('Is your `WHERE` clause correct?')\\ngroup_by = sel.check_field('group_by_clause').has_equal_ast('Is your `GROUP BY` clause correct?')\\nhaving_clause = sel.check_field('having_clause').has_equal_ast('Is your `HAVING` clause correct?')\\norder_by = sel.check_field('order_by_clause').has_equal_ast('Is your `ORDER BY` clause correct?')\\n\\nalias1 = test_column('avg_budget', match='exact', msg='Are you aliasing `avg_budget` correctly?')\\nalias2 = test_column('avg_gross', match='exact', msg='Are you aliasing `avg_gross` correctly?')\\n\\navg_in_having = having_clause.check_node('Call').has_equal_ast('Are you correctly calling `AVG` on `budget` in your `HAVING` clause?')\\n\\nlimit_clause = sel.check_field('limit_clause').has_equal_ast('Did you `LIMIT` the number of results to `5`?')\\n\\nEx().test_correct(check_result(), [\\n    limit_clause,\\n    order_by,\\n    group_by,\\n    from_clause,\\n    having_clause,\\n    country,\\n    alias1,\\n    alias2,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n---\\n## A taste of things to come\\n\\n```yaml\\ntype: TabExercise\\nlang: sql\\nxp: 100\\n\\nkey: d101be707a\\n```\\n\\nCongrats on making it to the end of the course! By now you should have a good understanding of the basics of SQL.\\n\\nThere's one more concept we're going to introduce. You may have noticed that all your results so far have been from just one table, e.g. `films` or `people`.\\n\\nIn the real world however, you will often want to query multiple tables. For example, what if you want to see the IMDB score for a particular movie?\\n\\nIn this case, you'd want to get the ID of the movie from the `films` table and then use it to get IMDB information from the `reviews` table. In SQL, this concept is known as a **join**, and a basic join is shown in the editor to the right.\\n\\nThe query in the editor gets the IMDB score for the film _To Kill a Mockingbird_! Cool right?\\n\\nAs you can see, joins are incredibly useful and important to understand for anyone using SQL.\\n\\nWe'll have a whole course dedicated to them coming soon!\\n\\n\\n\\n`@pre_exercise_code`\\n```{python}\\nconnect('postgresql', 'films')\\nset_options(visible_tables = ['films', 'reviews'])\\n```\\n`@sample_code`\\n```{sql}\\nSELECT title, imdb_score\\nFROM films\\nJOIN reviews\\nON films.id = reviews.film_id\\nWHERE title = 'To Kill a Mockingbird';\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: 30\\n\\nkey: 7c4fc7a484\\n```\\n\\n\\n\\n`@instructions`\\nSubmit the code in the editor and inspect the results.\\n\\n`@hint`\\nSubmit the code in the editor!\\n\\n\\n\\n`@solution`\\n```{sql}\\nSELECT title, imdb_score\\nFROM films\\nJOIN reviews\\nON films.id = reviews.film_id\\nWHERE title = 'To Kill a Mockingbird';\\n```\\n`@sct`\\n```{python}\\nsel = check_node('SelectStmt')\\n\\ntitle = test_column('title', msg='Did you select the `title` column correctly?')\\n\\nimdb_score = test_column('imdb_score', msg='Did you select the `imdb_score` column correctly?')\\n\\nfrom_clause = sel.check_field('from_clause').has_equal_ast('Is your `FROM` clause correct?')\\n\\nwhere_clause = sel.check_field('where_clause').has_equal_ast('Is your `WHERE` clause correct?')\\n\\nEx().test_correct(check_result(), [\\n    from_clause,\\n    where_clause,\\n    title,\\n    imdb_score,\\n    test_has_columns(),\\n    test_ncols(),\\n    test_error()\\n])\\n```\\n\\n\\n\\n\\n***\\n\\n\\n\\n```yaml\\ntype: MultipleChoiceExercise\\n\\nxp: 30\\n\\nkey: fc288db979\\n```\\n\\n\\n\\n\\n`@hint`\\nLook at the query result tab!\\n\\n\\n\\n\\n`@sct`\\n```{python}\\nmsg1 = 'Nope, look at the query results!'\\ncorrect = 'Correct!'\\n\\nEx().test_mc(2,[msg1, correct, msg1, msg1])\\n```\\n\\n\\n\\n\",\"sha\":\"68275620efa14fb25098c56d2aa02c516082fcad\",\"lastSavedSha\":\"68275620efa14fb25098c56d2aa02c516082fcad\"},\"chapter5.md\":{\"content\":\"---\\ntitle: aa\\ndescription: >-\\n  fa\\n\\n\\n---\\n## Insert exercise title here\\n\\n```yaml\\ntype: NormalExercise\\n\\nxp: \\n\\nkey: 52e7a0a1b0\\n```\\n\\na\\n\\n`@instructions`\\n\\n\\n`@hint`\\n\\n\\n\\n\\n\\n\\n\\n\\n\",\"sha\":\"c4c2b5f333fcee9841afa585998ad584e7af31f6\",\"lastSavedSha\":null}},\"repoId\":\"13\",\"branchName\":\"master\"},\"user\":{\"authToken\":\"5rVvHA4mSSs8jVwSZpZF\"}}"
}